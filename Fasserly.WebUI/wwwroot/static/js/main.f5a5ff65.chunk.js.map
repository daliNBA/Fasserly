{"version":3,"sources":["app/common/options/ITOptions.tsx","app/agent/agent.ts","app/common/util/util.ts","app/repositories/trainingRepository.ts","app/repositories/userRepository.ts","app/repositories/commonRepository.ts","app/repositories/modalRepository.ts","app/repositories/profileRepository.ts","app/repositories/baseRepository.ts","app/common/form/inputText.tsx","app/common/form/ErrorMessage.tsx","features/User/SocialLogin.tsx","features/User/LoginForm.tsx","features/User/RegisterForm.tsx","features/Nav/navBar.tsx","features/Training/TrainingListItemBuyers.tsx","features/Training/trainingItem.tsx","features/Training/trainingList.tsx","features/Training/dashboard/TrainingFilters.tsx","features/Training/dashboard/TrainingItemPlaceholder.tsx","features/Training/defaultDashboard.tsx","app/models/ITraining.ts","app/common/form/inputTextArea.tsx","app/common/form/inputSelect.tsx","app/common/form/inputDate.tsx","features/Training/form.tsx","app/layout/Loading.tsx","features/Training/trainingItem/trainingDetailInfo.tsx","features/Training/trainingItem/trainingDetailSideBar.tsx","features/Training/trainingItem/TrainingDetailedChat.tsx","features/Training/detail.tsx","features/Profile/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/Profile/ProfilePhotos.tsx","app/common/EditProfile/ProfileEditForm.tsx","features/Profile/ProfileDescription.tsx","features/Profile/ProfileCard.tsx","features/Profile/ProfileFollowings.tsx","features/Profile/ProfileTrainings.tsx","features/Profile/ProfileContent.tsx","features/Profile/ProfilePage.tsx","features/User/RegisterSuccess.tsx","features/User/VerifyEmail.tsx","app/layout/NoFound.tsx","app/common/modal/ModalContainer.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["ITList","key","text","value","axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","messagge","toast","data","status","history","push","startsWith","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","training","update","trainingId","buy","refund","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","username","uploadPhoto","photo","setMainPhoto","deletePhoto","editProfile","profile","follow","unfollow","listFollowings","predicate","listTrainings","setTrainingProps","isLogged","dateOfCreation","Date","isBuyer","buyers","some","a","isOwner","b","soldTraining","displayName","image","TrainingRepository","observable","ref","baseRepository","_baseRepository","this","reaction","keys","page","trainingRegestry","clear","loadTrainings","trainings","sortedTrainings","sort","getDate","Object","entries","reduce","date","toISOString","split","URLSearchParams","String","forEach","sortByDate","Array","from","values","Math","ceil","trainingCount","Map","action","set","computed","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonRepository","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","message","stop","err","userRepository","isLoggedIn","loading","agent","axiosParams","trainingsEnvelope","submitting","buyer","event","target","currentTarget","name","getTraining","loadingBuy","filter","UserRepository","refreshTokenTimeOut","jwtToken","JSON","parse","atob","timeOut","exp","getTime","now","setTimeout","clearTimeout","setToken","startRefreshTokenTimer","modalRepository","closeModal","trainingsRepository","stopRefreshTokenTimer","setItem","appLoaded","ModalRepository","shallow","open","content","modal","ProfileRepository","activeTab","loadFollowings","followings","activeIndex","loadingTraining","userTraining","userTrainings","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","followingsCount","profiles","configure","enforceActions","BaseRepositoryContext","createContext","profileRepository","CommonRepository","TextInput","input","width","type","placeholder","meta","touched","Form","Field","Label","basic","color","ErrorMessage","Message","Header","statusText","length","List","flat","map","i","Item","Content","observer","fbCallBack","appId","fields","callback","render","renderProps","Button","onClick","fluid","Icon","validate","combineValidators","isRequired","password","useContext","onSubmit","FORM_ERROR","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","as","textAlign","component","disabled","Divider","horizontal","diplayName","RegisterFrom","baseReposiitory","logout","openModal","Menu","pointing","NavLink","exact","to","src","alt","height","Dropdown","item","simple","direction","options","Input","icon","position","animated","margin","hidden","visible","Image","avatar","spaced","Link","RegisterForm","styles","borderColor","borderWidth","TrainingListItemBuyers","Popup","header","trigger","size","circular","bordered","style","trainingImageStyle","filtre","marginBottom","TrainingItem","owner","x","buyTraining","Segment","Group","title","Description","Rating","maxRating","defaultRating","format","description","secondary","clearing","attached","trainingByDate","divided","group","setPredicate","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","GridColumn","TrainingItemPlaceholder","pageStart","loadMore","hasMore","initialLoad","Column","Loader","TrainingFormValues","init","language","price","rating","updateDate","isActive","category","assign","InputTextArea","rows","InputSelect","Select","e","InputDate","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","loadTraining","createTraining","editTraining","setTraining","setLoading","finally","initialValues","dateAndTime","year","getFullYear","month","getMonth","day","stringDate","combineTimeAndDate","time","newTraining","uuid","floated","Or","positive","Loading","inverted","Dimmer","TrainingDetailInfo","SegmentGroup","verticalAlign","border","relaxed","ribbon","Extra","baseRepo","createHubConnection","stopHubConnection","addcomment","Comment","Avatar","Author","Metadata","formatDistance","dateOfComment","Text","form","reset","labelPosition","primary","refundTraining","deleteTraining","Card","ui","tag","Meta","className","extra","isCurrentUser","Statistic","widths","label","Reveal","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","overflow","negative","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","itemsPerRow","bio","editProfileMode","setEditProfileMode","ProfileCard","ProfileFollowings","panes","menuItem","pane","loggedPanes","loadUserTrainings","menu","onTabChange","handleTabChange","objectFit","ProfileTrainings","ProfileContent","setActiveTab","menuPosition","loadProfile","RegisterSuccess","location","queryString","search","Inline","success","VerifyEmail","Status","resensendEmailHandler","setStatus","LoginForm","getBody","NotFound","Modal","onClose","withRouter","setAppLoaded","getUser","Container","path","TrainingDashboard","TrainingEdit","TrainingDetails","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAAaA,EAAS,CAClB,CAAEC,IAAK,MAAOC,KAAM,kBAAmBC,MAAO,OAC9C,CAAEF,IAAK,MAAOC,KAAM,MAAOC,MAAO,OAClC,CAAEF,IAAK,OAAQC,KAAM,OAAQC,MAAO,QACpC,CAAEF,IAAK,QAASC,KAAM,QAASC,MAAO,SACtC,CAAEF,IAAK,OAAQC,KAAM,iBAAkBC,MAAO,QAC9C,CAAEF,IAAK,UAAWC,KAAM,qBAAsBC,MAAO,WACrD,CAAEF,IAAK,YAAaC,KAAM,YAAaC,MAAO,aAC9C,CAAEF,IAAK,KAAMC,KAAM,KAAMC,MAAO,MAChC,CAAEF,IAAK,UAAWC,KAAM,UAAWC,MAAO,WAC1C,CAAEF,IAAK,mBAAoBC,KAAM,mBAAoBC,MAAO,oBAC5D,CAAEF,IAAK,UAAWC,KAAM,UAAWC,MAAO,Y,2GCJ9CC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAACC,GAC5B,IAAMC,EAAQC,OAAOC,aAAaC,QAAQ,OAE1C,OADIH,IAAOD,EAAOK,QAAQC,cAAf,iBAAyCL,IAC7CD,KACR,SAAAO,GACC,OAAOC,QAAQC,OAAOF,MAG1Bd,IAAMI,aAAaa,SAASX,SAAIY,GAAW,SAACJ,GACjB,kBAAnBA,EAAMK,UAAiCL,EAAMG,UAC7CG,IAAMN,MAAM,6CAFkC,MAGRA,EAAMG,SAAxCI,EAH0C,EAG1CA,KAAMC,EAHoC,EAGpCA,OAAQf,EAH4B,EAG5BA,OAAQK,EAHoB,EAGpBA,QAc9B,MAbKE,EAAMG,UACPG,IAAMN,MAAM,iDACD,MAAXQ,GACAC,GAAQC,KAAK,aACF,MAAXF,GAAkBV,EAAQ,oBAAoBa,WAAW,kCACzDhB,OAAOC,aAAagB,WAAW,OAC/BH,GAAQC,KAAK,KACbJ,IAAMO,KAAK,gDAEA,MAAXL,GAAoC,QAAlBf,EAAOqB,QAAoBP,EAAKQ,OAAOC,eAAe,OACxEP,GAAQC,KAAK,aACF,MAAXF,GACAF,IAAMN,MAAM,oDACVA,EAAMG,YAGhB,I,2KAAMc,GAAe,SAACd,GAAD,OAA6BA,EAASI,MAIrDW,GACG,SAACC,GAAD,OAAiBjC,IAAMkC,IAAID,GAAKE,KAAKJ,KADxCC,GAEI,SAACC,EAAaG,GAAd,OAA2BpC,IAAMqC,KAAKJ,EAAKG,GAAMD,KAAKJ,KAF1DC,GAGG,SAACC,EAAaG,GAAd,OAA2BpC,IAAMsC,IAAIL,EAAKG,GAAMD,KAAKJ,KAHxDC,GAIM,SAACC,GAAD,OAAiBjC,IAAMuC,OAAON,GAAKE,KAAKJ,KAJ9CC,GAKQ,SAACC,EAAaO,GACpB,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjBxC,IAAMqC,KAAKJ,EAAKQ,EAAU,CAC7B7B,QAAS,CAAE,eAAgB,yBAC5BuB,KAAKJ,KAsCD,GAjCO,CAClBa,KAAM,SAACC,GAAD,OACF7C,IAAMkC,IAAI,YAAa,CAAEW,OAAQA,IAAUV,KAAKJ,KACpDe,QAAS,SAACC,GAAD,OAAgBf,GAAA,oBAA0Be,KACnDC,OAAQ,SAACC,GAAD,OAAyBjB,GAAc,YAAaiB,IAC5DC,OAAQ,SAACD,GAAD,OAAyBjB,GAAA,oBAA0BiB,EAASE,YAAcF,IAClFV,OAAQ,SAACQ,GAAD,OAA4Bf,GAAA,oBAA6Be,KACjEK,IAAK,SAACL,GAAD,OAA4Bf,GAAA,oBAA2Be,EAA3B,QAAqC,KACtEM,OAAQ,SAACN,GAAD,OAA4Bf,GAAA,oBAA6Be,EAA7B,WAyBzB,GATG,CACdO,QAAS,kBAAsBtB,GAAa,UAC5CuB,MAAO,SAACC,GAAD,OAA2CxB,GAAA,cAA6BwB,IAC/EC,SAAU,SAACD,GAAD,OAA2CxB,GAAA,iBAAgCwB,IACrFE,QAAS,SAACC,GAAD,OAAyB3B,GAAA,iBAAgC,CAAE2B,iBACpEC,aAAc,kBAAsB5B,GAAA,qBAAoC,KACxE6B,YAAa,SAACrD,EAAesD,GAAhB,OAAkD9B,GAAA,mBAAkC,CAAExB,QAAOsD,WAC1GC,mBAAoB,SAACD,GAAD,OAAkC9B,GAAA,8CAAoD8B,MAE/F,GArBM,CACjB5B,IAAK,SAAC8B,GAAD,OAAyChC,GAAA,mBAAyBgC,KACvEC,YAAa,SAACC,GAAD,OAAkClC,GAAA,SAA4BkC,IAC3EC,aAAc,SAACpB,GAAD,OAAgBf,GAAA,iBAAwBe,EAAxB,YAAsC,KACpEqB,YAAa,SAACrB,GAAD,OAAgBf,GAAA,iBAA0Be,KACvDsB,YAAa,SAACC,GAAD,OAAgCtC,GAAA,WAAyBsC,IACtEC,OAAQ,SAACP,GAAD,OAAsBhC,GAAA,mBAA0BgC,EAA1B,WAA6C,KAC3EQ,SAAU,SAACR,GAAD,OAAsBhC,GAAA,mBAA4BgC,EAA5B,aAChCS,eAAgB,SAACT,EAAkBU,GAAnB,OAAyC1C,GAAA,mBAAyBgC,EAAzB,6BAAsDU,KAC/GC,cAAe,SAACX,EAAkBU,GAAnB,OAAyC1C,GAAA,mBAAyBgC,EAAzB,gCAAyDU,MClExGE,GAAmB,SAAC3B,EAAqBO,EAAaqB,GAW/D,OATA5B,EAAS6B,eAAiB,IAAIC,KAAK9B,EAAS6B,gBACxCD,IACA5B,EAAS+B,QAAU/B,EAASgC,OAAQC,MAChC,SAAAC,GAAC,OAAIA,EAAEnB,WAAaR,EAAKQ,YAE7Bf,EAASmC,QAAUnC,EAASgC,OAAQC,MAChC,SAAAG,GAAC,OAAIA,EAAErB,WAAaR,EAAKQ,UAAYqB,EAAED,YAGxCnC,GAGEqC,GAAe,SAAC9B,GACzB,MAAO,CACH+B,YAAa/B,EAAK+B,YAClBH,SAAS,EACTpB,SAAUR,EAAKQ,SACfwB,MAAOhC,EAAKgC,Q,UClBCC,I,EAuBhBC,IAAWC,I,aApBZ,WAAYC,GAAiC,IAAD,gCAD5CC,qBAC4C,k+BACxCC,KAAKD,gBAAkBD,EACvBG,aACI,kBAAM,EAAKrB,UAAUsB,UACrB,WACI,EAAKC,KAAO,EACZ,EAAKC,iBAAiBC,QACtB,EAAKC,mB,uDAiGNC,GACP,IAAMC,EAAkBD,EAAUE,MAAK,SAACpB,EAAGE,GAAJ,OAAUF,EAAEL,eAAgB0B,UAAYnB,EAAEP,eAAgB0B,aACjG,OAAOC,OAAOC,QAAQJ,EAAgBK,QAAO,SAACN,EAAWpD,GACrD,IAAM2D,EAAO3D,EAAS6B,eAAgB+B,cAAcC,MAAM,KAAK,GAE/D,OADAT,EAAUO,GAAQP,EAAUO,GAAV,sBAAsBP,EAAUO,IAAhC,CAAuC3D,IAAY,CAACA,GAC/DoD,IACR,O,kCA7EH,IAAMxD,EAAS,IAAIkE,gBAUnB,OATAlE,EAAOF,OAAO,QAASqE,OAvCjB,IAwCNnE,EAAOF,OAAO,SAAd,UAA2BmD,KAAKG,KAxC1B,EAwCiCH,KAAKG,KAAe,IAC3DH,KAAKpB,UAAUuC,SAAQ,SAAClH,EAAOF,GACf,cAARA,EACAgD,EAAOF,OAAO9C,EAAKE,EAAM8G,eAEzBhE,EAAOF,OAAO9C,EAAKE,MAGpB8C,I,qCAIP,OAAOiD,KAAKoB,WAAWC,MAAMC,KAAKtB,KAAKI,iBAAiBmB,a,iCAIxD,OAAOC,KAAKC,KAAKzB,KAAK0B,cAxDhB,O,2CAkBT9B,K,yEAAwC,Q,qCACxCA,K,yEAAqB,K,wCACrBA,K,yEAAwB,K,8CACxBA,K,yEAA8B,IAAI+B,O,oCAClC/B,K,wEAAoB,M,wCACpBA,K,yEAAwB,K,uHAE6B,Q,2CACrDA,K,yEAA2B,K,kCAC3BA,K,yEAAkB,K,uCAClBA,K,yEAAuB,IAAI+B,O,0CAE3BC,K,oFAAsB,SAAChD,EAAmB3E,GACvC,EAAK2E,UAAUyB,QACG,QAAdzB,GACA,EAAKA,UAAUiD,IAAIjD,EAAW3E,O,uCAIrC6H,K,kHAcAA,K,iHAIAA,K,4GAGAF,K,oFAAiB,SAACzB,GACf,EAAKA,KAAOA,M,iDAIfyB,K,oFAA6B,SAACvE,GAC3B,EAAK0E,eAAgB,IAAIC,MAEpBC,QAAQ5H,QAAqC,CAC1C6H,mBAAoB,kBAAM,EAAKnC,gBAAgBoC,iBAAiBzH,SAEnE0H,iBAAiBC,KAASC,aAC1BC,QACL,EAAKR,cAAcS,QACdnG,MAAK,kBAAMoG,QAAQC,IAAI,EAAKX,cAAeY,UAC3CtG,MAAK,WACFoG,QAAQC,IAAI,4BAEZ,EAAKX,cAAea,OAAO,aAAcvF,MAE5CwF,OAAM,SAAA7H,GAAK,OAAIyH,QAAQC,IAAI,+BAAgC1H,MAEhE,EAAK+G,cAAce,GAAG,kBAAkB,SAAAC,GACpCC,aAAY,WACR,EAAK7F,SAAU8F,SAASvH,KAAKqH,SAGrC,EAAKhB,cAAce,GAAG,QAAQ,SAAAI,GAC1B5H,IAAMO,KAAKqH,U,+CAIlBtB,K,oFAA2B,WAAO,IAAD,EAC9B,EAAKG,cAAea,OAAO,kBAA3B,UAA8C,EAAKzF,gBAAnD,aAA8C,EAAeE,YACxDhB,MAAK,WAAO,IAAD,EACR,YAAK0F,qBAAL,SAAoBoB,UACrB9G,MAAK,kBAAMoG,QAAQC,IAAI,yBACzBG,OAAM,SAAAO,GAAG,OAAIX,QAAQC,IAAIU,MAC9B,EAAKrB,cAAeoB,W,wCAGvBvB,K,2HAAoB,WAAOL,GAAP,eAAAlC,EAAA,6DACjBkC,EAAOlE,WAAP,UAAoB,EAAKF,gBAAzB,aAAoB,EAAeE,WADlB,kBAIP,EAAK0E,cAAea,OAAO,cAAerB,GAJnC,sDAMbkB,QAAQC,IAAR,MANa,wD,oGAmBpBd,K,0GAAuB,kCAAAvC,EAAA,6DACdN,EAAW,EAAKgB,gBAAgBsD,eAAeC,WACrD,EAAKC,SAAU,EAFK,kBAIgBC,GAAoB1G,KAAK,EAAK2G,aAJ9C,OAIVC,EAJU,OAKRnD,EAA6BmD,EAA7BnD,UAAWmB,EAAkBgC,EAAlBhC,cACnBsB,aAAY,WACRzC,EAAUY,SAAQ,SAAChE,GACf2B,GAAiB3B,EAAU,EAAK4C,gBAAgBsD,eAAe3F,KAAOqB,GACtE,EAAKqB,iBAAiByB,IAAI1E,EAASE,WAAYF,GAC/CsF,QAAQC,IAAIvF,EAASgC,WAEzB,EAAKuC,cAAgBA,EACrB,EAAK6B,SAAU,KAbH,kDAiBhBP,aAAY,WACRP,QAAQC,IAAR,MACA,EAAKa,SAAU,KAnBH,6D,4CAwBvB3B,K,2HAAwB,WAAOzE,GAAP,iBAAAkC,EAAA,6DACrB,EAAKsE,YAAa,EADG,kBAGXH,GAAoBtG,OAAOC,GAHhB,QAIXyG,EAAQpE,GAAa,EAAKO,gBAAgBsD,eAAe3F,OACzD4B,SAAU,GACZH,EAAS,IACNzD,KAAKkI,GACZzG,EAASgC,OAASA,EAClBhC,EAASmC,SAAU,EACnBnC,EAAS8F,SAAW,GACpBD,aAAY,WACR,EAAK5C,iBAAiByB,IAAI1E,EAASE,WAAYF,GAC/C,EAAKA,SAAWA,EAChB,EAAKwG,YAAa,KAEtBlI,GAAQC,KAAR,0BAAgCyB,EAASE,aAhBxB,kDAkBjB2F,aAAY,WACR,EAAKW,YAAa,EAClBlB,QAAQC,IAAR,SAEJpH,IAAMN,MAAM,yBAtBK,0D,mGA0BxB4G,K,2HAAsB,WAAOzE,GAAP,SAAAkC,EAAA,6DACnB,EAAKsE,YAAa,EADC,kBAGTH,GAAoBpG,OAAOD,GAHlB,OAIf6F,aAAY,WACR,EAAK5C,iBAAiByB,IAAI1E,EAASE,WAAYF,GAC/C,EAAKA,SAAWA,EAChB,EAAKwG,YAAa,KAEtBlI,GAAQC,KAAR,0BAAgCyB,EAASE,aAT1B,gDAYf2F,aAAY,WACRP,QAAQC,IAAR,MACA,EAAKiB,YAAa,KAEtBrI,IAAMN,MAAM,yBAhBG,yD,qGAoBtB4G,K,2HAAwB,WAAOiC,EAA0C5G,GAAjD,SAAAoC,EAAA,6DACrB,EAAKsE,YAAa,EAClB,EAAKG,OAASD,EAAME,cAAcC,KAFb,kBAIXR,GAAoB/G,OAAOQ,GAJhB,OAKjB+F,aAAY,WACR,EAAK5C,iBAAiB3D,OAAOQ,GAC7B,EAAKE,SAAW,KAChB,EAAKwG,YAAa,EAClB,EAAKG,OAAS,MATD,gDAYjBd,aAAY,WACRP,QAAQC,IAAR,MACA,EAAKiB,YAAa,EAClB,EAAKG,OAAS,MAfD,yD,qGAoBxBlC,K,2HAAsB,WAAO3E,GAAP,iBAAAoC,EAAA,yDACbN,EAAW,EAAKgB,gBAAgBsD,eAAeC,aACjDnG,EAAW,EAAK8G,YAAYhH,IAFb,uBAIf,EAAKE,SAAWA,EAJD,kBAKRA,GALQ,uBAQX,EAAKoG,SAAU,EARJ,UASMC,GAAoBxG,QAAQC,GATlC,QASXE,EATW,OAUX6F,aAAY,WAKR,OAJAlE,GAAiB3B,EAAU,EAAK4C,gBAAgBsD,eAAe3F,KAAOqB,GACtE,EAAK5B,SAAWA,EAChB,EAAKoG,SAAU,EACfd,QAAQC,IAAIvF,GACLA,KAfA,kDAkBX6F,aAAY,WACRP,QAAQC,IAAR,MACA,EAAKa,SAAU,KApBR,0D,kGA0BtB3B,K,0GAAqB,4BAAAvC,EAAA,6DACZuE,EAAQpE,GAAa,EAAKO,gBAAgBsD,eAAe3F,MAC/D,EAAKwG,YAAa,EAFA,kBAKRV,GAAoBlG,IAAI,EAAKH,SAAUE,YAL/B,OAMd2F,aAAY,WACJ,EAAK7F,WACL,EAAKA,SAASgC,OAAQzD,KAAKkI,GAC3B,EAAKzG,SAAS+B,SAAU,EACxB,EAAKkB,iBAAiByB,IAAI,EAAK1E,SAASE,WAAY,EAAKF,UACzD,EAAK+G,YAAa,MAXZ,gDAgBdlB,aAAY,WACR,EAAKkB,YAAa,KAEtB5I,IAAMN,MAAM,yBAnBE,4D,4CAuBrB4G,K,0GAAwB,sBAAAvC,EAAA,6DACrB,EAAK6E,YAAa,EADG,kBAGXV,GAAoBjG,OAAO,EAAKJ,SAAUE,YAH/B,OAIjB2F,aAAY,WACJ,EAAK7F,WACL,EAAKA,SAASgC,OAAS,EAAKhC,SAASgC,OAAQgF,QAAO,SAAA5E,GAAC,OAAIA,EAAErB,WAAa,EAAK6B,gBAAgBsD,eAAe3F,KAAMQ,YAClH,EAAKf,SAAS+B,SAAU,EACxB,EAAKkB,iBAAiByB,IAAI,EAAK1E,SAASE,WAAY,EAAKF,UACzD,EAAK+G,YAAa,MATT,gDAajBlB,aAAY,WACR,EAAKkB,YAAa,KAEtB5I,IAAMN,MAAM,yBAhBK,4D,0CAoBxB4G,K,oFAAqB,SAAC3E,GACnB,OAAO,EAAKmD,iBAAiBhE,IAAIa,O,6CAGpC2E,K,oFAAwB,SAAC3E,GACtB,EAAKE,SAAW,EAAKiD,iBAAiBhE,IAAIa,O,4CAE7C2E,K,oFAAuB,WACpB,EAAKzE,SAAW,S,GCjSHiH,I,cAIjB,WAAYtE,GAAiC,yBAF5CuE,yBAE2C,OAD5CtE,qBAC4C,kSACxCC,KAAKD,gBAAkBD,E,mEAgGIpC,GAC3B,IAAM4G,EAAWC,KAAKC,MAAMC,KAAK/G,EAAKhD,MAAMsG,MAAM,KAAK,KAEjD0D,EADU,IAAIzF,KAAoB,IAAfqF,EAASK,KACVC,UAAY3F,KAAK4F,MAAS,IAClD7E,KAAKqE,oBAAsBS,WAAW9E,KAAKlC,aAAc4G,K,8CAIzDK,aAAa/E,KAAKqE,uB,iCAlGO,QAASrE,KAAKtC,S,yCAH1CkC,K,yEAAgC,Q,uCAChCA,K,yEAAqB,K,uCAErBkC,K,8GAEAF,K,2HAAe,WAAOL,GAAP,eAAAlC,EAAA,+EAEWmE,GAAgB/F,MAAM8D,GAFjC,OAEF7D,EAFE,OAGRsF,aAAY,WACR,EAAKtF,KAAOA,KAEhB,EAAKqC,gBAAgBoC,iBAAiB6C,SAAStH,EAAKhD,OACpD,EAAKuK,uBAAuBvH,GAC5B,EAAKqC,gBAAgBmF,gBAAgBC,aACrC1J,GAAQC,KAAK,cACb,EAAKqE,gBAAgBqF,oBAAoB9E,gBACzCmC,QAAQC,IAAI,EAAKhF,MAXT,wDAaR+E,QAAQC,IAAR,MAbQ,+D,iGAkBfd,K,2HAAkB,WAAOL,GAAP,eAAAlC,EAAA,+EAEQmE,GAAgB7F,SAAS4D,GAFjC,OAEL7D,EAFK,OAGX,EAAKqC,gBAAgBmF,gBAAgBC,aACrC,EAAKpF,gBAAgBoC,iBAAiB6C,SAAStH,EAAKhD,OACpDe,GAAQC,KAAR,sCAA4C6F,EAAOvD,QACnDyE,QAAQC,IAAI,EAAKhF,MANN,wDAQX+E,QAAQC,IAAR,MARW,+D,gGAalBd,K,0GAAiB,4BAAAvC,EAAA,+EAESmE,GAAgBhG,UAFzB,OAEJE,EAFI,OAGVsF,aAAY,WACR,EAAKtF,KAAOA,KAEhB,EAAKqC,gBAAgBoC,iBAAiB6C,SAAStH,EAAKhD,OACpD,EAAKuK,uBAAuBvH,GAPlB,gDASV+E,QAAQC,IAAR,MATU,4D,sCAajBd,K,oFAAgB,WACb,EAAK7B,gBAAgBoC,iBAAiB6C,SAAS,MAC/C,EAAKtH,KAAO,KACZ,EAAKqC,gBAAgBqF,oBAAoB9E,oB,4CAG5CsB,K,0GAAsB,4BAAAvC,EAAA,6DACnB,EAAKgG,wBADc,kBAGI7B,GAAgB1F,eAHpB,OAGTJ,EAHS,OAIfsF,aAAY,WACR,EAAKtF,KAAOA,KAEhB,EAAKqC,gBAAgBoC,iBAAiB6C,SAAStH,EAAKhD,OACpD,EAAKuK,uBAAuBvH,GARb,kDAUf+E,QAAQC,IAAR,MAVe,6D,uCActBd,K,2HAAiB,WAAOzG,GAAP,eAAAkE,EAAA,6DACd,EAAKkE,SAAU,EADD,kBAGSC,GAAgB5F,QAAQzC,EAAS0C,aAH1C,OAGJH,EAHI,OAIVsF,aAAY,WACR,EAAKtF,KAAOA,EACZ,EAAKqC,gBAAgBoC,iBAAiB6C,SAAStH,EAAKhD,OACpD,EAAKuK,uBAAuBvH,GAC5B,EAAKqC,gBAAgBmF,gBAAgBC,aACrC1J,GAAQC,KAAK,cACb,EAAKqE,gBAAgBqF,oBAAoB9E,gBACzC,EAAKiD,SAAU,KAGnBd,QAAQC,IAAI,EAAKhF,MAdP,sDAgBVsF,aAAY,WACR,EAAKO,SAAU,KAEnBd,QAAQC,IAAR,MAnBU,8D,6DChFDP,I,GAGjB,WAAYrC,GAAiC,IAAD,gCAD5CA,oBAC4C,wJACxCE,KAAKF,eAAiBA,EAEtBG,aACI,kBAAM,EAAKvF,SACX,SAAAA,GAEQA,EACAC,OAAOC,aAAa0K,QAAQ,MAAO5K,GAGnCC,OAAOC,aAAagB,WAAW,W,qCAM9CgE,K,yEAAkCjF,OAAOC,aAAaC,QAAQ,U,yCAC9D+E,K,yEAAuB,K,wCAEvBgC,K,oFAAkB,SAAClH,GAChB,EAAKA,MAAQA,M,4CAEhBkH,K,oFAAsB,WACnB,EAAK2D,WAAY,M,IC3BJC,I,GAMhB5F,IAAW6F,Q,GAJZ,WAAY3F,GAAiC,yBAD7CA,oBAC4C,iHACxCE,KAAKF,eAAiBA,G,iHAGE,CACxB4F,MAAM,EACNpJ,KAAM,S,yCAGTsF,K,oFAAmB,SAAC+D,GACjB,EAAKC,MAAMF,MAAO,EAClB,EAAKE,MAAMtJ,KAAOqJ,M,0CAIrB/D,K,oFAAoB,WACjB,EAAKgE,MAAMF,MAAO,EAClB,EAAKE,MAAMtJ,KAAO,S,aCdLuJ,I,cAEjB,WAAY/F,GAAiC,IAAD,gCAD5CA,oBAC4C,stBACxCE,KAAKF,eAAiBA,EAEtBG,aACI,kBAAM,EAAK6F,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAMlH,EAA0B,IAAdkH,EAAkB,YAAc,aAClD,EAAKC,eAAenH,QAEpB,EAAKoH,WAAa,M,0DAgB9B,SAAIhG,KAAKF,eAAeuD,eAAe3F,OAAQsC,KAAKxB,UACzCwB,KAAKF,eAAeuD,eAAe3F,KAAKQ,WAAa8B,KAAKxB,QAAQN,a,4CAXhF0B,K,yEAAsC,Q,8CACtCA,K,yEAA4B,K,8CAC5BA,K,yEAA4B,K,uCAC5BA,K,yEAAqB,K,0CACrBA,K,wEAAoC,M,yCACpCA,K,yEAA+B,K,6CAC/BA,K,wEAA4C,M,+CAC5CA,K,yEAA6B,K,0CAE7BkC,K,wHAOAF,K,oFAAsB,SAACqE,GACpB,EAAKH,UAAYG,M,iDAGpBrE,K,2HAA2B,WAAO1D,EAAkBU,GAAzB,eAAAS,EAAA,6DACxB,EAAK6G,iBAAkB,EADC,kBAGO1C,GAAmB3E,cAAcX,EAAUU,GAHlD,OAGduH,EAHc,OAIpBnD,aAAY,WACR,EAAKoD,cAAgBD,EACrB,EAAKD,iBAAkB,KANP,gDASpB5K,IAAMN,MAAM,4BACZgI,aAAY,WACR,EAAKkD,iBAAkB,KAXP,yD,sGAgB3BtE,K,2HAAqB,WAAO1D,GAAP,eAAAmB,EAAA,+EAEQmE,GAAmBpH,IAAI8B,GAF/B,OAERM,EAFQ,OAGdwE,aAAY,WACR,EAAKxE,QAAUA,EACf,EAAK6H,gBAAiB,KALZ,gDAQdrD,aAAY,WACR,EAAKqD,gBAAiB,KAE1B5D,QAAQC,IAAR,MAXc,yD,oGAerBd,K,2HAAqB,WAAOlF,GAAP,eAAA2C,EAAA,6DAClB,EAAKiH,gBAAiB,EADJ,kBAGM9C,GAAmBrF,YAAYzB,GAHrC,OAGR0B,EAHQ,OAId4E,aAAY,WACJ,EAAKxE,UACL,EAAKA,QAAQ+H,OAAO7K,KAAK0C,GACrBA,EAAMoI,QAAU,EAAK1G,eAAeuD,eAAe3F,OACnD,EAAKoC,eAAeuD,eAAe3F,KAAKgC,MAAQtB,EAAMjC,IACtD,EAAKqC,QAAQkB,MAAQtB,EAAMjC,IAC3B,EAAKqC,QAAQkB,MAAQtB,EAAMjC,MAGnC,EAAKmK,gBAAiB,KAbZ,gDAgBd7D,QAAQC,IAAR,MACApH,IAAMN,MAAM,4BACZgI,aAAY,WACR,EAAKsD,gBAAiB,KAnBZ,yD,qGAwBrB1E,K,2HAAsB,WAAOxD,GAAP,SAAAiB,EAAA,6DACnB,EAAKkE,SAAU,EADI,kBAGTC,GAAmBnF,aAAaD,EAAMnB,IAH7B,OAIf+F,aAAY,WACR,EAAKlD,eAAeuD,eAAe3F,KAAMgC,MAAQtB,EAAMjC,IACvD,EAAKqC,QAAS+H,OAAOE,MAAK,SAAApH,GAAC,OAAIA,EAAEmH,UAASA,QAAS,EACnD,EAAKhI,QAAS+H,OAAOE,MAAK,SAAApH,GAAC,OAAIA,EAAEpC,KAAOmB,EAAMnB,MAAKuJ,QAAS,EAC5D,EAAKhI,QAASkB,MAAQtB,EAAMjC,IAC5B,EAAKoH,SAAU,KATJ,gDAYfd,QAAQC,IAAR,MACApH,IAAMN,MAAM,kCACZgI,aAAY,WACR,EAAKO,SAAU,KAfJ,yD,oGAoBtB3B,K,2HAAqB,WAAOxD,GAAP,SAAAiB,EAAA,6DAClB,EAAKkE,SAAU,EADG,kBAGRC,GAAmBlF,YAAYF,EAAMnB,IAH7B,OAId+F,aAAY,WACR,EAAKxE,QAAS+H,OAAS,EAAK/H,QAAS+H,OAAOpC,QAAO,SAAA9E,GAAC,OAAIA,EAAEpC,KAAOmB,EAAMnB,MACvE,EAAKsG,SAAU,KANL,gDASdd,QAAQC,IAAR,MACApH,IAAMN,MAAM,2BACZgI,aAAY,WACR,EAAKO,SAAU,KAZL,yD,oGAiBrB3B,K,2HAAqB,WAAOpD,GAAP,SAAAa,EAAA,+EAERmE,GAAmBjF,YAAYC,GAFvB,OAGdwE,aAAY,WACJxE,EAAQiB,cAAgB,EAAKK,eAAeuD,eAAe3F,KAAM+B,cACjE,EAAKK,eAAeuD,eAAe3F,KAAM+B,YAAcjB,EAAQiB,aAEnE,EAAKjB,QAAL,6BAAoB,EAAKA,SAAaA,MAP5B,gDAUdlD,IAAMN,MAAM,4BACZgI,aAAY,eAXE,yD,+FAgBrBpB,K,2HAAgB,WAAO1D,GAAP,SAAAmB,EAAA,6DACb,EAAKkE,SAAU,EADF,kBAGHC,GAAmB/E,OAAOP,GAHvB,OAIT8E,aAAY,WACR,EAAKxE,QAASkI,WAAY,EAC1B,EAAKlI,QAASmI,iBACd,EAAKpD,SAAU,EACfd,QAAQC,IAAI,EAAKlE,QAASoI,oBARrB,gDAWTtL,IAAMN,MAAM,0BACZgI,aAAY,WACR,EAAKO,SAAU,KAbV,yD,iGAkBhB3B,K,2HAAkB,WAAO1D,GAAP,SAAAmB,EAAA,6DACf,EAAKkE,SAAU,EADA,kBAGLC,GAAmB9E,SAASR,GAHvB,OAIX8E,aAAY,WACR,EAAKxE,QAASkI,WAAY,EAC1B,EAAKlI,QAASmI,iBACd,EAAKpD,SAAU,KAPR,gDAUXjI,IAAMN,MAAM,4BACZgI,aAAY,WACR,EAAKO,SAAU,KAZR,yD,uGAiBlB3B,K,2HAAwB,WAAOhD,GAAP,eAAAS,EAAA,6DACrB,EAAKkE,SAAU,EADM,kBAGMC,GAAmB7E,eAAe,EAAKH,QAASN,SAAUU,GAHhE,OAGXiI,EAHW,OAIjB7D,aAAY,WACR,EAAKgD,WAAaa,EAClB,EAAKtD,SAAU,KANF,gDASjBP,aAAY,WACR,EAAKO,SAAU,KAVF,yD,6DCrL7BuD,YAAU,CAAEC,eAAgB,WAErB,IAgBMC,GAAwBC,wBAAc,IAR/C,aAAe,yBANf7B,yBAMc,OALd/B,oBAKc,OAJdlB,sBAIc,OAHd+C,qBAGc,OAFdgC,uBAEc,EACVlH,KAAKoF,oBAAsB,IAAIzF,GAAmBK,MAClDA,KAAKqD,eAAiB,IAAIe,GAAepE,MACzCA,KAAKmC,iBAAmB,IAAIgF,GAAiBnH,MAC7CA,KAAKkF,gBAAkB,IAAIM,GAAgBxF,MAC3CA,KAAKkH,kBAAoB,IAAIrB,GAAkB7F,Q,2DCJxCoH,GAbqB,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,MAAOC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,YAA4C,IAA/BC,KAAQC,EAAuB,EAAvBA,QAAS1M,EAAc,EAAdA,MACrF,OACI,eAAC2M,GAAA,EAAKC,MAAN,CAAY5M,MAAO0M,KAAa1M,EAAOuM,KAAMA,EAAMD,MAAOA,EAA1D,UACI,mDAAWD,GAAX,IAAkBG,YAAaA,KAC9BE,GAAW1M,GACR,cAAC6M,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SACK/M,Q,UCYNgN,GAhBwB,SAAC,GAAqB,IAAnBhN,EAAkB,EAAlBA,MAAOhB,EAAW,EAAXA,KAC7C,OACI,eAACiO,GAAA,EAAD,CAASjN,OAAK,EAAd,UACI,cAACiN,GAAA,EAAQC,OAAT,UAAiBlN,EAAMmN,aACtBnN,EAAMO,MAAQoF,OAAOT,KAAKlF,EAAMO,KAAKQ,QAAQqM,OAAS,GACnD,cAACH,GAAA,EAAQI,KAAT,UACK1H,OAAOY,OAAOvG,EAAMO,KAAKQ,QAAQuM,OAAOC,KAAI,SAACnF,EAAUoF,GAAX,OACzC,cAACP,GAAA,EAAQQ,KAAT,UAAuBrF,GAAJoF,QAI9BxO,GAAQ,cAACiO,GAAA,EAAQS,QAAT,CAAiB/C,QAAS3L,Q,uCCShC2O,gBAlBuB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,WAAYrF,EAAc,EAAdA,QACjD,OACI,8BACI,cAAC,KAAD,CACIsF,MAAM,kBACNC,OAAO,qBACPC,SAAUH,EACVI,OAAQ,SAACC,GAAD,OACJ,eAACC,EAAA,EAAD,CAAQC,QAASF,EAAYE,QAAS5B,KAAK,SAAS6B,OAAK,EAACrB,MAAM,WAAWxE,QAASA,EAApF,UACI,cAAC8F,EAAA,EAAD,CAAMrF,KAAK,aADf,iCCNdsF,GAAWC,6BAAkB,CAC/BvL,MAAOwL,sBAAW,SAClBC,SAAUD,sBAAW,cAiCVb,gBA9BG,WACd,IADoB,EACIe,qBAAW1C,IACiB3D,eAA5C5F,EAFY,EAEZA,MAAOG,EAFK,EAELA,QAAS2F,EAFJ,EAEIA,QACxB,OACI,cAAC,KAAD,CACIoG,SAAU,SAACpI,GAAD,OAA6B9D,EAAM8D,GAAQsB,OAAM,SAAA7H,GAAK,uBAC3D4O,KAAa5O,OAElBsO,SAAUA,GACVN,OAAQ,gBAAGa,EAAH,EAAGA,aAAclG,EAAjB,EAAiBA,WAAYmG,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,QAASC,EAAnD,EAAmDA,SAAUC,EAA7D,EAA6DA,qBAA7D,OACJ,eAACtC,GAAA,EAAD,CAAMgC,SAAUE,EAAc7O,OAAK,EAAnC,UACI,cAACkN,GAAA,EAAD,CAAQgC,GAAG,KAAKvE,QAAQ,oBAAoBoC,MAAM,OAAOoC,UAAU,WACnE,cAAC,KAAD,CAAOnG,KAAK,QAAQoG,UAAWhD,GAAWI,YAAY,UACtD,cAAC,KAAD,CAAOxD,KAAK,WAAWoG,UAAWhD,GAAWI,YAAY,WAAWD,KAAK,aACxEuC,IAAgBG,GAAwB,cAAC,GAAD,CAAcjP,MAAO8O,EAAa9P,KAA6B,MAAvB8P,EAAYtO,OAAiB,0CAA4C,YAC1J,cAAC0N,EAAA,EAAD,CACImB,SAAWN,IAAYE,GAAyBD,EAChDzG,QAASI,EACToE,MAAM,OACNpC,QAAQ,QACRyD,OAAK,IAET,cAACkB,GAAA,EAAD,CAASC,YAAU,EAAnB,gBACA,cAAC,GAAD,CAAahH,QAASA,EAASqF,WAAYhL,aC9BzD0L,GAAWC,6BAAkB,CAC/BvL,MAAOwL,sBAAW,SAClBtL,SAAUsL,sBAAW,YACrBgB,WAAYhB,sBAAW,cACvBC,SAAUD,sBAAW,cAiCViB,GA9BM,WACjB,IACQ9M,EADgB+L,qBAAW1C,IACE3D,eAA7B1F,SACR,OACI,cAAC,KAAD,CACIgM,SAAU,SAACpI,GAAD,OAA6B5D,EAAS4D,GAAQsB,OAAM,SAAA7H,GAAK,uBAC9D4O,KAAa5O,OAElBsO,SAAUA,GACVN,OAAQ,gBAAGa,EAAH,EAAGA,aAAclG,EAAjB,EAAiBA,WAAYmG,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,QAASC,EAAnD,EAAmDA,SAAUC,EAA7D,EAA6DA,qBAA7D,OACJ,eAACtC,GAAA,EAAD,CAAMgC,SAAUE,EAAc7O,OAAK,EAAnC,UACI,cAACkN,GAAA,EAAD,CAAQgC,GAAG,KAAKvE,QAAQ,sBAAsBoC,MAAM,OAAOoC,UAAU,WACrE,cAAC,KAAD,CAAOnG,KAAK,WAAWoG,UAAWhD,GAAWI,YAAY,aACzD,cAAC,KAAD,CAAOxD,KAAK,aAAaoG,UAAWhD,GAAWI,YAAY,eAC3D,cAAC,KAAD,CAAOxD,KAAK,QAAQoG,UAAWhD,GAAWI,YAAY,UACtD,cAAC,KAAD,CAAOxD,KAAK,WAAWoG,UAAWhD,GAAWI,YAAY,WAAWD,KAAK,aACxEuC,IAAgBG,GAAwB,cAAC,GAAD,CAAcjP,MAAO8O,IAC9D,cAACZ,EAAA,EAAD,CACImB,SAAWN,IAAYE,GAAyBD,EAChDzG,QAASI,EACToE,MAAM,OACNpC,QAAQ,WACRyD,OAAK,WC2BdT,gBAzDU,WACrB,IAAM+B,EAAkBhB,qBAAW1C,IADR,EAEU0D,EAAgBrH,eAA7CC,EAFmB,EAEnBA,WAAY5F,EAFO,EAEPA,KAAMiN,EAFC,EAEDA,OAClBC,EAAcF,EAAgBxF,gBAA9B0F,UAER,OACI,8BACI,eAACC,EAAA,EAAD,CAAMC,UAAQ,EAAd,UACI,cAACD,EAAA,EAAKpC,KAAN,CAAWyB,GAAIa,IAASC,OAAK,EAACC,GAAG,aAAajH,KAAK,OAAnD,SACI,qBAAKkH,IAAI,mBAAmBC,IAAI,OAAOC,OAAO,OAAO9D,MAAM,SAE/D,cAAC+D,EAAA,EAAD,CACIC,MAAI,EACJC,QAAM,EACNvR,KAAK,aACLwR,UAAU,QACVC,QAAS3R,IAEb,cAAC+Q,EAAA,EAAKpC,KAAN,UACI,cAACiD,EAAA,EAAD,CAAOC,KAAK,SAASnE,YAAY,YAAYoE,SAAS,WAEzDtI,GAAc5F,GAAQ,cAACmN,EAAA,EAAKpC,KAAN,UACnB,cAACS,EAAA,EAAD,CAAQgB,GAAIa,IAASE,GAAG,kBAAkBtF,QAAQ,sBAGtD,cAACkF,EAAA,EAAKpC,KAAN,CAAWmD,SAAS,QAApB,SACI,eAAC1C,EAAA,EAAD,CAAQ2C,SAAS,WAAWC,OAAO,KAAnC,UACI,cAAC5C,EAAA,EAAOR,QAAR,CAAgBqD,QAAM,EAAtB,oBACA,cAAC7C,EAAA,EAAOR,QAAR,CAAgBsD,SAAO,EAAvB,SACI,cAAC3C,EAAA,EAAD,CAAMrF,KAAK,gBAItBV,GAAc5F,EAEP,eAACmN,EAAA,EAAKpC,KAAN,WACI,cAACwD,EAAA,EAAD,CAAOC,QAAM,EAACC,OAAO,QAAQjB,IAAKxN,EAAKgC,OAAS,qBAChD,cAAC2L,EAAA,EAAD,CAAUP,SAAS,YAAY9Q,KAAM0D,EAAK+B,YAA1C,SACI,eAAC4L,EAAA,EAASR,KAAV,WACI,cAACQ,EAAA,EAAS5C,KAAV,CAAeyB,GAAIkC,IAAMnB,GAAE,mBAAcvN,EAAKQ,UAAYlE,KAAK,aAAa2R,KAAK,SACjF,cAACN,EAAA,EAAS5C,KAAV,CAAeU,QAASwB,EAAQ3Q,KAAK,SAAS2R,KAAK,kBAK/D,cAACd,EAAA,EAAKpC,KAAN,UACI,gCACI,cAACS,EAAA,EAAD,CAAQC,QAAS,kBAAMyB,EAAU,cAAC,GAAD,MAAgB9C,OAAK,EAACC,MAAM,OAA7D,qBACA,cAACmB,EAAA,EAAD,CAAQC,QAAS,kBAAMyB,EAAU,cAACyB,GAAD,MAAmBtE,MAAM,MAA1D,kC,mGClD1BuE,GAAS,CACXC,YAAa,SACbC,YAAa,GAuBFC,GApBkC,SAAC,GAAgB,IAAdtN,EAAa,EAAbA,OAChD,OACI,cAACkJ,GAAA,EAAD,CAAMkC,YAAU,EAAhB,SACKpL,GAAUA,EAAOoJ,KAAI,SAAC3E,GAAD,OAClB,cAACyE,GAAA,EAAKI,KAAN,UACI,cAACiE,GAAA,EAAD,CAAOC,OAAQ/I,EAAMnE,YACjBmN,QACI,cAACX,EAAA,EAAD,CACIY,KAAK,OACLC,UAAQ,EAAC5B,IAAKtH,EAAMlE,OAAS,mBAC7BqN,UAAQ,EACRC,MAAOpJ,EAAM8C,UAAY4F,GAAQ,UAPjC1I,EAAM1F,gBCRhC+O,GAAqB,CACvBC,OAAQ,kBACRC,aAAc,GAsEHC,GAnEyC,SAAC,GAAkB,IAAhBjQ,EAAe,EAAfA,SACjDkQ,EAAQlQ,EAASgC,OAAQgF,QAAO,SAAAmJ,GAAC,OAAIA,EAAEhO,WAAS,GAChDS,EAAkB2J,qBAAW1C,IAC3BuG,EAAgBxN,EAAgBqF,oBAAhCmI,YACAjK,EAAevD,EAAgBsD,eAA/BC,WACR,OACI,eAACkK,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,UACI,cAAC/E,GAAA,EAAKgF,MAAN,UACI,eAAChF,GAAA,EAAD,WACI,cAACA,GAAA,EAAKwD,MAAN,CAAY/B,GAAIkC,IAAMnB,GAAE,0BAAqB9N,EAASE,YAAc6N,IAAG,kBAAa/N,EAASuQ,MAAtB,QAAmCb,KAAK,SAASG,MAAOC,KAC/H,eAACxE,GAAA,EAAKC,QAAN,WACI,cAACD,GAAA,EAAKP,OAAN,CAAagC,GAAIkC,IAAMnB,GAAE,0BAAqB9N,EAASE,YAAvD,SACKF,EAASuQ,QAEd,eAACjF,GAAA,EAAKkF,YAAN,yBAA6B,cAAC,IAAD,CAAM1C,GAAE,mBAAcoC,EAAMnP,UAA5B,SAAwC,iCAASmP,EAAM5N,gBAApF,OACA,cAACgJ,GAAA,EAAKkF,YAAN,UAAkB,cAACC,GAAA,EAAD,CAAQC,UAAW,EAAGC,cAAe,EAAGnC,KAAK,OAAOkB,KAAK,YAC1EvJ,GAAcnG,EAASmC,SACpB,cAACmJ,GAAA,EAAKkF,YAAN,UACI,cAAC9F,GAAA,EAAD,CACIC,OAAK,EACLC,MAAM,SACNpC,QAAQ,wCAInBrC,GAAcnG,EAAS+B,UAAY/B,EAASmC,SACzC,cAACmJ,GAAA,EAAKkF,YAAN,UACI,cAAC9F,GAAA,EAAD,CACIC,OAAK,EACLC,MAAM,QACNpC,QAAQ,+CAQpC,eAAC6H,GAAA,EAAD,WACI,cAACnE,EAAA,EAAD,CAAMrF,KAAK,UADf,IAC2B+J,aAAO5Q,EAAS6B,eAAgB,UACvD,uBACA,+BAAO7B,EAAS6Q,iBAEnB1K,GACG,cAACkK,GAAA,EAAD,CAASS,WAAS,EAAlB,SACI,cAAC,GAAD,CAAwB9O,OAAQhC,EAASgC,YAKhDmE,GAAenG,EAASmC,SAAYnC,EAAS+B,QAOtC,cAACsO,GAAA,EAAD,CAASU,UAAQ,EAACC,SAAS,SAA3B,SACI,cAACjF,EAAA,EAAD,CAAQnB,MAAM,OAAOpC,QAAQ,oBAPrC,eAAC6H,GAAA,EAAD,CAASU,UAAQ,EAACC,SAAS,SAA3B,UACI,cAACjF,EAAA,EAAD,CAAQnB,MAAM,OAAOpC,QAAQ,kBAC7B,cAACuD,EAAA,EAAD,CAAQnB,MAAM,SAASoB,QAASoE,EAAa5H,QAAQ,mBCpC1DgD,gBAxBO,WAClB,IACQyF,EADe1E,qBAAW1C,IACQ5B,oBAAlCgJ,eACR,OACI,cAAC3F,GAAA,EAAKgF,MAAN,CAAYY,SAAO,EAAnB,SACI,cAAC,WAAD,UACKD,EAAe7F,KAAI,oCAAE+F,EAAF,KAAS/N,EAAT,YAChB,eAAC,WAAD,WACI,cAACsH,GAAA,EAAD,CAAOgF,KAAK,QAAQ9E,MAAM,OAA1B,SACKgG,aAAO,IAAI9O,KAAKqP,GAAQ,kBAE7B,cAAC7F,GAAA,EAAKgF,MAAN,UACKlN,EAAUgI,KAAI,SAACpL,GAAD,OACX,cAAC,GAAD,CAAwCA,SAAUA,GAA/BA,EAASE,mBANzBiR,a,UCmCpB3F,gBA3CS,WACpB,IAD0B,EACTe,qBAAW1C,IACiB5B,oBAArCmJ,EAFkB,EAElBA,aAAc3P,EAFI,EAEJA,UACtB,OACI,eAAC,WAAD,WACI,eAACiM,EAAA,EAAD,CAAM2D,UAAQ,EAAC3B,KAAM,QAASG,MAAO,CAAE1F,MAAO,OAAQmH,UAAW,IAAjE,UACI,cAACvG,GAAA,EAAD,CAAQyD,KAAM,SAAUwC,UAAQ,EAACpG,MAAO,OAAQpC,QAAS,YACzD,cAACkF,EAAA,EAAKpC,KAAN,CACIiG,OAA2B,IAAnB9P,EAAUiO,KAClB1D,QAAS,kBAAMoF,EAAa,MAAO,SACnCxG,MAAO,OACP/D,KAAM,MACN2B,QAAS,gBAEb,cAACkF,EAAA,EAAKpC,KAAN,CACIiG,OAAQ9P,EAAU+P,IAAI,WACtBxF,QAAS,kBAAMoF,EAAa,UAAW,SACvCxG,MAAO,OACP/D,KAAM,WACN2B,QAAS,eAEb,cAACkF,EAAA,EAAKpC,KAAN,CACIiG,OAAQ9P,EAAU+P,IAAI,WACtBxF,QAAS,kBAAMoF,EAAa,UAAW,SACvCxG,MAAO,OACP/D,KAAM,OACN2B,QAAS,iBAGjB,cAACuC,GAAA,EAAD,CACIyD,KAAM,WACNwC,UAAQ,EACRpG,MAAO,OACPpC,QAAS,gBAEb,cAAC,YAAD,CACIiJ,SAAU,SAAA9N,GAAI,OAAIyN,EAAa,YAAazN,IAC5C7G,MAAO2E,EAAUxC,IAAI,cAAgB,IAAI6C,a,UCP1C4P,GAlCqB,WAChC,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAa1F,OAAK,EAAC4D,MAAO,CAAEyB,UAAW,IAAvC,SACI,eAACjB,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,CAASR,MAAO,CAAE+B,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY5G,OAAb,CAAoBxI,OAAK,EAAzB,UACI,cAACoP,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACxB,GAAA,EAAD,UACI,eAACsB,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACxB,GAAA,EAAD,CAASS,WAAS,EAACjB,MAAO,CAAE+B,UAAW,MACvC,cAACvB,GAAA,EAAD,CAASU,UAAQ,EAAjB,SACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,iB,qBCyBbrG,gBA5CqB,WAEhC,IAAM7I,EAAiB4J,qBAAW1C,IAFI,EAGwBlH,EAAesF,oBAArE9E,EAH8B,EAG9BA,cAAeiD,EAHe,EAGfA,QAAS2L,EAHM,EAGNA,QAAS/O,EAHH,EAGGA,KAAMgP,EAHT,EAGSA,WACzCzU,EAAQC,OAAOC,aAAaC,QAAQ,OAClCyI,EAAexD,EAAeuD,eAA9BC,WAL8B,EAMA8L,oBAAS,GANT,oBAM/BC,EAN+B,KAMlBC,EANkB,KAiBtC,OAJAC,qBAAU,WACFjP,MACL,CAACA,IAGA,eAACkP,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYnI,MAAO,GAAnB,SACK/D,GAAoB,IAATpD,EAAa,cAACuP,GAAD,IACrB,cAAC,KAAD,CACIC,UAAW,EACXC,SAfE,WAClBN,GAAe,GACfJ,EAAQ/O,EAAO,GACfG,IAAgBjE,MAAK,kBAAMiT,GAAe,OAa1BO,SAAUR,GAAelP,EAAO,EAAIgP,EACpCW,aAAa,EAJjB,SAMI,cAAC,GAAD,QAIXxM,GAAc5I,GACX,cAAC8U,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,SACI,cAAC,GAAD,MAGR,cAACkI,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,cAAC0I,GAAA,EAAD,CAAQtB,OAAQW,Y,UCfnBY,GAYT,WAAYC,GAA4B,yBAXxC7S,WAAqB,GAWkB,KAVvCqQ,MAAgB,GAUuB,KATvCyC,SAAmB,GASoB,KARvCC,MAAgB,IAQuB,KAPvCC,OAAiB,EAOsB,KANvCrR,eAAuB,IAAIC,KAAKA,KAAK4F,OAME,KALvCyL,WAAmB,IAAIrR,KAAKA,KAAK4F,OAKM,KAJvCmJ,YAAsB,GAIiB,KAHvCuC,UAAoB,EAGmB,KAFvCC,SAAmB,GAGf7P,OAAO8P,OAAOzQ,KAAMkQ,I,UCzBbQ,GAbyB,SAAC,GAAmE,IAAjErJ,EAAgE,EAAhEA,MAAOC,EAAyD,EAAzDA,MAAOqJ,EAAkD,EAAlDA,KAAMnJ,EAA4C,EAA5CA,YAA4C,IAA/BC,KAAQC,EAAuB,EAAvBA,QAAS1M,EAAc,EAAdA,MACzF,OACI,eAAC2M,GAAA,EAAKC,MAAN,CAAY5M,MAAO0M,KAAa1M,EAAOsM,MAAOA,EAA9C,UACI,oDAAUqJ,KAAMA,GAAUtJ,GAA1B,IAAiCG,YAAaA,KAC7CE,GAAW1M,GACR,cAAC6M,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SACK/M,Q,UCaN4V,GAnBuB,SAAC,GAAsE,IAApEvJ,EAAmE,EAAnEA,MAAOoE,EAA4D,EAA5DA,QAASnE,EAAmD,EAAnDA,MAAOE,EAA4C,EAA5CA,YAA4C,IAA/BC,KAAQC,EAAuB,EAAvBA,QAAS1M,EAAc,EAAdA,MAC1F,OACI,eAAC2M,GAAA,EAAKC,MAAN,CAAY5M,MAAO0M,KAAa1M,EAAOsM,MAAOA,EAA9C,UACI,cAACuJ,GAAA,EAAD,CACI5W,MAAOoN,EAAMpN,MACb2U,SAAU,SAACkC,EAAGvV,GAAJ,OAAa8L,EAAMuH,SAASrT,EAAKtB,QAC3CuN,YAAaA,EACbiE,QAASA,IAEZ/D,GAAW1M,GACR,cAAC6M,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SACK/M,QCUN+V,GApBqB,SAAC,GAA0F,EAAxF9T,GAAyF,IAA9EoK,EAA6E,EAA7EA,MAAOC,EAAsE,EAAtEA,MAAOE,EAA+D,EAA/DA,YAA+D,IAAlD1G,YAAkD,SAA9B4G,EAA8B,EAApCD,KAAezM,EAAqB,EAArBA,MAAqB,2EAC3H,OACI,eAAC2M,GAAA,EAAKC,MAAN,CAAY5M,MAAO0M,KAAa1M,EAAOsM,MAAOA,EAA9C,UACI,cAAC,kBAAD,CACIE,YAAaA,EACbvN,MAAOoN,EAAMpN,OAAS,KACtB6G,KAAMA,EACN8N,SAAUvH,EAAMuH,SAChBoC,OAAQ3J,EAAM2J,OACdC,UAAW,SAACH,GAAD,OAAOA,EAAEI,oBAEvBxJ,GAAW1M,GACR,cAAC6M,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SACK/M,QCJfsO,GAAWC,6BAAkB,CAC/BmE,MAAOlE,sBAAW,CAAEtG,QAAS,yBAC7BsN,SAAUhH,sBAAW,CAAEtG,QAAS,4BAChC8K,YAAamD,6BACT3H,sBAAW,gBACX4H,gCAAqB,GAArBA,CAAyB,CAAElO,QAAS,+BAF3BiO,GAIbf,MAAO5G,sBAAW,CAAEtG,QAAS,2BA4ElByF,gBArEoD,SAAC,GAAwB,IAAtB0I,EAAqB,EAArBA,MAAO5V,EAAc,EAAdA,QAAc,EAEhEiO,qBAAW1C,IAMT5B,oBAJjBzB,EAJ+E,EAI/EA,WACA2N,EAL+E,EAK/EA,aACAC,EAN+E,EAM/EA,eACAC,EAP+E,EAO/EA,aAP+E,EAUvDpC,mBAAS,IAAIa,IAV0C,oBAUhF9S,EAVgF,KAUtEsU,EAVsE,OAWzDrC,oBAAS,GAXgD,oBAWhF7L,EAXgF,KAWvEmO,EAXuE,KAavFnC,qBAAU,WACF8B,EAAMtU,OAAOE,KACbyU,GAAW,GACXJ,EAAaD,EAAMtU,OAAOE,IAAIZ,MAC1B,SAACc,GAAD,OAAcsU,EAAY,IAAIxB,GAAmB9S,OACnDwU,SAAQ,kBAAMD,GAAW,SAEhC,CAACJ,EAAcD,EAAMtU,OAAOE,KAmB/B,OACI,cAACuS,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CAAYnI,MAAO,GAAnB,SACI,cAACkG,GAAA,EAAD,CAASU,UAAQ,EAAjB,SACI,cAAC,KAAD,CACI5E,SAAUA,GACVsI,cAAezU,EACfwM,SAxBU,SAACpI,GAC3BkB,QAAQC,IAAInB,GACZ,IAAMsQ,EvBnDoB,SAAC/Q,GAC/B,IAAMgR,EAAOhR,EAAKiR,cACZC,EAAQlR,EAAKmR,WAAa,EAC1BC,EAAMpR,EAAKJ,UACXyR,EAAU,UAAML,EAAN,YAAcE,EAAd,YAAuBE,GACvC,OAAO,IAAIjT,KAAKkT,GuB8CQC,CAAmB7Q,EAAOvC,gBACvB7B,GAAaoE,EAA5BT,KAA4BS,EAAtB8Q,KAH6B,aAGP9Q,EAHO,kBAK3C,GADApE,EAAS6B,eAAiB6S,EACrB1U,EAASE,WAQVmU,EAAarU,OARS,CACtB,IAAImV,EAAW,6BACRnV,GADQ,IAEXE,WAAYkV,kBAEhB9P,QAAQC,IAAIvF,GACZoU,EAAee,KAcHtJ,OAAQ,gBAAGa,EAAH,EAAGA,aAAcG,EAAjB,EAAiBA,SAAjB,OAEA,eAACrC,GAAA,EAAD,CAAMgC,SAAUE,EAActG,QAASA,EAAvC,UACI,cAAC,KAAD,CAAO6G,UAAWhD,GAAWI,YAAY,QAAQxD,KAAK,QAAQ/J,MAAOkD,EAASuQ,QAC9E,cAAC,KAAD,CAAOtD,UAAWsG,GAAeC,KAAM,EAAGnJ,YAAY,cAAcxD,KAAK,cAAc/J,MAAK,OAAEkD,QAAF,IAAEA,OAAF,EAAEA,EAAU6Q,cACxG,cAAC,KAAD,CAAOxG,YAAY,OAAO4C,UAAW2G,GAAWjQ,MAAM,EAAMkD,KAAK,iBAAiB/J,MAAOkD,EAAS6B,iBAClG,cAAC,KAAD,CAAOoL,UAAWhD,GAAWI,YAAY,QAAQxD,KAAK,QAAQ/J,MAAOkD,EAASiT,QAC9E,cAAC,KAAD,CAAOhG,UAAWwG,GAAanF,QAAS3R,EAAQkK,KAAK,WAAW/J,MAAK,OAAEkD,QAAF,IAAEA,OAAF,EAAEA,EAAUqT,WACjF,eAACtH,EAAA,EAAOuE,MAAR,CAAc+E,QAAQ,QAAtB,UACI,cAACtJ,EAAA,EAAD,CAAQmB,SAAU9G,EAAS4F,QAAShM,EAASE,WAAa,kBAAM5B,EAAQC,KAAR,0BAAgCyB,EAASE,cAAgB,kBAAM5B,EAAQC,KAAK,eAAe8W,QAAQ,QAAQjL,KAAK,SAAhL,oBACA,cAAC2B,EAAA,EAAOuJ,GAAR,IACA,cAACvJ,EAAA,EAAD,CAAQwJ,UAAQ,EAACrI,SAAU9G,GAAWyG,EAAUzG,QAASI,EAAY6O,QAAQ,QAAQjL,KAAK,SAA1F,sC,oBC7EzBoL,GARqD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUjN,EAAc,EAAdA,QAC7E,OACI,cAACkN,GAAA,EAAD,CAAQnE,QAAM,EAACkE,SAAUA,EAAzB,SACI,cAAC5C,GAAA,EAAD,CAAQrK,QAASA,O,UCmCdmN,GArC+C,SAAC,GAAkB,IAAhB3V,EAAe,EAAfA,SAC7D,OACI,eAAC4V,GAAA,EAAD,WACI,cAACvF,GAAA,EAAD,CAASW,SAAS,MAAlB,SACI,eAACqB,GAAA,EAAD,WACI,cAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,SACI,cAAC+B,EAAA,EAAD,CAAMwD,KAAK,QAAQ9E,MAAM,OAAO/D,KAAK,WAEzC,cAACwL,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,4BAAInK,EAAS6Q,qBAIzB,cAACR,GAAA,EAAD,UACI,eAACgC,GAAA,EAAD,CAAMwD,cAAc,SAApB,UACI,cAACxD,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,SACI,cAAC+B,EAAA,EAAD,CAAMwD,KAAK,QAAQ9E,MAAM,OAAO/D,KAAK,eAEzC,cAACwL,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,iCAAOyG,aAAO5Q,EAAS6B,eAAgB,gBAAvC,OAA4D+O,aAAO5Q,EAAS6B,eAAgB,oBAIxG,cAACwO,GAAA,EAAD,UACI,eAACgC,GAAA,EAAD,CAAMwD,cAAc,SAApB,UACI,cAACxD,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,SACI,cAAC+B,EAAA,EAAD,CAAMwD,KAAK,QAAQ9E,MAAM,OAAO/D,KAAK,gBAEzC,cAACwL,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,+BAAOnK,EAASiT,mBCkBzBzH,gBAzCmC,SAAC,GAAgB,IAAdxJ,EAAa,EAAbA,OACjD,OAEI,eAAC,WAAD,WACI,eAACqO,GAAA,EAAD,CACIrD,UAAU,SACV6C,MAAO,CAAEiG,OAAQ,QACjB9E,SAAS,MACTF,WAAS,EACT2E,UAAQ,EACR7K,MAAM,OANV,UAQK5I,EAAQiJ,OARb,IAQyC,IAAnBjJ,EAAQiJ,OAAe,SAAW,SARxD,kBAUA,cAACoF,GAAA,EAAD,CAASW,UAAQ,EAAjB,SACI,cAAC9F,GAAA,EAAD,CAAM6K,SAAO,EAAC7E,SAAO,EAArB,SACKlP,EAAQoJ,KAAI,SAAC3E,GAAD,OACT,eAAC6E,GAAA,EAAD,CAA2BuE,MAAO,CAAEpB,SAAU,YAA9C,UACKhI,EAAMtE,SAAW,cAACuI,GAAA,EAAD,CACdmF,MAAO,CAAEpB,SAAU,YACnB7D,MAAM,SACNoL,OAAO,QAHO,yBAOlB,cAAClH,EAAA,EAAD,CAAOY,KAAK,OAAO3B,IAAKtH,EAAMlE,OAAS,qBACvC,eAAC+I,GAAA,EAAKC,QAAN,CAAcsK,cAAc,SAA5B,UACI,cAACvK,GAAA,EAAKP,OAAN,CAAagC,GAAG,KAAhB,SACI,cAAC,IAAD,CAAMe,GAAE,mBAAcrH,EAAM1F,UAA5B,SAAyC0F,EAAMnE,gBAElDmE,EAAM8C,WAAa,cAAC+B,GAAA,EAAK2K,MAAN,CAAYpG,MAAO,CAAEjF,MAAO,UAA5B,4BAbjBnE,EAAM1F,uB,oBC4C1ByK,gBA9Dc,WACzB,IAAM0K,EAAW3J,qBAAW1C,IADG,EAE0CqM,EAASjO,oBAA1EkO,EAFuB,EAEvBA,oBAAqBC,EAFE,EAEFA,kBAAmBC,EAFjB,EAEiBA,WAAYrW,EAF7B,EAE6BA,SACpDmG,EAAe+P,EAAShQ,eAAxBC,WAOR,OANAiM,qBAAU,WAEN,OADA+D,EAAoBnW,EAAUE,YACvB,WACHkW,OAEL,CAACD,EAAqBC,EAAmBpW,IAExC,eAAC,WAAD,WACI,cAACqQ,GAAA,EAAD,CACIrD,UAAU,SACVgE,SAAS,MACTyE,UAAQ,EACR7K,MAAM,OACNiF,MAAO,CAAEiG,OAAQ,QALrB,SAOI,cAAC/K,GAAA,EAAD,uCAEJ,cAACsF,GAAA,EAAD,CAASW,UAAQ,EAAjB,SACI,eAACsF,GAAA,EAAQhG,MAAT,WACKtQ,GAAYA,EAAS8F,UAAY9F,EAAS8F,SAASsF,KAAI,SAACxF,GAAD,OACpD,eAAC0Q,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBxI,IAAKnI,EAAQrD,OAAS,qBACtC,eAAC+T,GAAA,EAAQ/K,QAAT,WACI,cAAC+K,GAAA,EAAQE,OAAT,CAAgBzJ,GAAIkC,IAAMnB,GAAE,mBAAclI,EAAQ7E,UAAlD,SAA+D6E,EAAQyH,aACvE,cAACiJ,GAAA,EAAQG,SAAT,UACI,8BAAMC,aAAe,IAAI5U,KAAK8D,EAAQ+Q,eAAgB,IAAI7U,UAE9D,cAACwU,GAAA,EAAQM,KAAT,UAAehR,EAAQzG,YAPjByG,EAAQ+Q,kBAWzBxQ,GACG,cAAC,KAAD,CACAqG,SAAU6J,EACVxK,OAAQ,gBAAGa,EAAH,EAAGA,aAAclG,EAAjB,EAAiBA,WAAYqQ,EAA7B,EAA6BA,KAA7B,OACJ,eAACrM,GAAA,EAAD,CAAMgC,SAAU,kBAAME,IAAgBxN,MAAK,kBAAM2X,EAAKC,YAAtD,UACI,cAAC,KAAD,CACIjQ,KAAK,OACLoG,UAAWsG,GACXC,KAAM,EACNnJ,YAAY,oBAEhB,cAAC0B,EAAA,EAAD,CACIvD,QAAQ,YACRuO,cAAc,OACdvI,KAAK,OACLwI,SAAO,EACP5Q,QAASI,qBCoB9BgF,gBAhEuD,SAAC,GAAwB,IAAtB0I,EAAqB,EAArBA,MAAO5V,EAAc,EAAdA,QAAc,EAEnEiO,qBAAW1C,IACkF5B,oBAA5GjI,EAHkF,EAGlFA,SAAUmU,EAHwE,EAGxEA,aAAc/N,EAH0D,EAG1DA,QAAyB6Q,GAHiC,EAGjDC,eAHiD,EAGjCD,gBAAgB7G,EAHiB,EAGjBA,YAAarJ,EAHI,EAGJA,WAMtF,OAJAqL,qBAAU,WACN+B,EAAaD,EAAMtU,OAAOE,MAC3B,CAACqU,EAAcD,EAAMtU,OAAOE,GAAIxB,IAE/B8H,EAAgB,cAAC,GAAD,CAASoC,QAAS,uBACjCxI,EAID,eAACqS,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYnI,MAAO,GAAnB,UACI,eAACgN,GAAA,EAAD,CAAMlL,OAAK,EAAX,UACI,cAAC6C,EAAA,EAAD,CAAOY,KAAK,OAAO3B,IAAG,kBAAa/N,EAASuQ,MAAtB,QAAmC6G,IAAI,IAC7D,eAACD,GAAA,EAAK5L,QAAN,WACI,eAAC4L,GAAA,EAAKpM,OAAN,kBACK/K,QADL,IACKA,OADL,EACKA,EAAUuQ,MACX,cAAC7F,GAAA,EAAM4F,MAAP,CAAa+G,KAAG,EAAhB,SACI,eAAC3M,GAAA,EAAD,CAAOqC,GAAG,IAAV,0BAAgB/M,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAUiT,cAGlC,cAACkE,GAAA,EAAKG,KAAN,UACI,sBAAMC,UAAU,OAAhB,SAAwB3G,aAAO5Q,EAAS6B,eAAgB,oBAE5D,cAACsV,GAAA,EAAK3G,YAAN,iBACKxQ,QADL,IACKA,OADL,EACKA,EAAU6Q,iBAGlB7Q,EAASmC,QAEF,eAACgV,GAAA,EAAK5L,QAAN,CAAciM,OAAK,EAAnB,UACI,cAACzL,EAAA,EAAD,CAAQgB,GAAIkC,IAAMnB,GAAE,kBAAa9N,EAASE,YAAgE0K,MAAM,QAAhH,kBACA,cAACmB,EAAA,EAAD,CAAiEnB,MAAM,MAAvE,oBACA,cAACmB,EAAA,EAAD,CAAQC,QAAS,kBAAM1N,EAAQC,KAAK,eAApC,wBAERyB,EAAS+B,QACL,eAACoV,GAAA,EAAK5L,QAAN,CAAciM,OAAK,EAAnB,UACI,cAACzL,EAAA,EAAD,CAAQgB,GAAIkC,IAAMnB,GAAE,iBAAY9N,EAASE,YAAc0K,MAAM,QAA7D,mBACA,cAACmB,EAAA,EAAD,CAAQgB,GAAIkC,IAAMnB,GAAE,oBAAe9N,EAASE,YAAc0K,MAAM,MAAhE,uBACA,cAACmB,EAAA,EAAD,CAAQ3F,QAASW,EAAYiF,QAASiL,EAAtC,wBAGA,eAACE,GAAA,EAAK5L,QAAN,CAAciM,OAAK,EAAnB,UACI,cAACzL,EAAA,EAAD,CAAQ3F,QAASW,EAAYiF,QAASoE,EAAaxF,MAAM,QAAzD,0BACA,cAACmB,EAAA,EAAD,CAAQgB,GAAIkC,IAAMnB,GAAE,kBAAa9N,EAASE,YAAc0K,MAAM,OAA9D,2BACA,cAACmB,EAAA,EAAD,CAAQC,QAAS,kBAAM1N,EAAQC,KAAK,eAApC,2BAKpB,cAAC,GAAD,CAAoByB,SAAUA,IAC9B,cAAC,GAAD,OAEJ,cAACsS,GAAA,EAAD,CAAYnI,MAAO,EAAnB,SACI,cAAC,GAAD,CAAuBnI,OAAQhC,EAASgC,cA/CzC,wC,oBC0CAwJ,gBAvDyB,SAAC,GAAuE,IAArEnK,EAAoE,EAApEA,QAASC,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,SAAU6E,EAAyC,EAAzCA,QAASqR,EAAgC,EAAhCA,cAAetR,EAAiB,EAAjBA,WAC1F,OACI,cAACkK,GAAA,EAAD,UACI,eAACgC,GAAA,EAAD,WACI,cAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,cAACmB,GAAA,EAAKgF,MAAN,UACI,eAAChF,GAAA,EAAD,WACI,cAACA,GAAA,EAAKwD,MAAN,CACIC,QAAM,EACNW,KAAK,QACL3B,IAAK1M,EAAQkB,OAAU,qBAE3B,cAAC+I,GAAA,EAAKC,QAAN,CAAcsK,cAAc,SAA5B,SACI,cAAC9K,GAAA,EAAD,CAAQgC,GAAG,KAAX,SAAiB1L,EAAQiB,uBAKzC,eAAC+P,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,UACI,eAACuN,GAAA,EAAUpH,MAAX,CAAiBqH,OAAQ,EAAzB,UACI,cAACD,GAAA,EAAD,CAAWE,MAAM,YAAY9a,MAAOuE,EAAQmI,iBAC5C,cAACkO,GAAA,EAAD,CAAWE,MAAM,YAAY9a,MAAOuE,EAAQoI,qBAEhD,cAAC0D,GAAA,EAAD,KACEsK,GAAiBtR,GACf,eAAC0R,GAAA,EAAD,CAAQnJ,SAAS,OAAjB,UACI,cAACmJ,GAAA,EAAOtM,QAAR,CAAgBsD,SAAO,EAACgB,MAAO,CAAE1F,MAAO,QAAxC,SACI,cAAC4B,EAAA,EAAD,CACIE,OAAK,EACLrB,MAAM,OACNpC,QAASnH,EAAQkI,UAAY,YAAc,oBAGnD,cAACsO,GAAA,EAAOtM,QAAR,CAAgBqD,QAAM,EAAtB,SACI,cAAC7C,EAAA,EAAD,CACI3F,QAASA,EACT6F,OAAK,EACLtB,OAAK,EACLC,MAAOvJ,EAAQkI,UAAY,MAAQ,QACnCf,QAASnH,EAAQkI,UAAY,WAAa,SAC1CyC,QACI3K,EAAQkI,UACF,kBAAMhI,EAASF,EAAQN,WACvB,kBAAMO,EAAOD,EAAQN,6B,oBCjD7D+W,GAAiB,CACnBhC,OAAQ,aACR1G,YAAa,OACb2I,aAAc,MACdC,WAAY,OACZhL,UAAW,SACXiB,OAAQ,SAGNgK,GAAiB,CACnB7I,YAAa,SA6BF8I,GA1B+B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvCC,EAASC,uBAAY,SAAAC,GACvBH,EACIG,EAAclN,KAAI,SAAC7L,GAAD,OACdiE,OAAO8P,OAAO/T,EAAM,CAChBgZ,QAASC,IAAIC,gBAAgBlZ,WAI1C,CAAC4Y,IATwD,EAUNO,aAAY,CAAEN,WAA5DO,EAVoD,EAUpDA,aAAcC,EAVsC,EAUtCA,cAAeC,EAVuB,EAUvBA,aAErC,OACI,kDACQF,KADR,IAEI9I,MACIgJ,EAAY,6BAAQf,IAAmBG,IAAmBH,GAHlE,UAMI,sCAAWc,MACX,cAAC1M,EAAA,EAAD,CAAMrF,KAAK,SAAS6I,KAAK,SACzB,cAAC3E,GAAA,EAAD,CAAQvC,QAAQ,yB,qBCGbsQ,I,OApC8B,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAChDC,EAAUC,iBAAgB,MAgBhC,OACI,cAAC,KAAD,CACIxW,IAAKuW,EACLlL,IAAKiL,EACLnJ,MAAO,CAAE5B,OAAQ,IAAK9D,MAAO,QAE7BgP,YAAa,EACbZ,QAAQ,eACRa,QAAQ,EACRC,SAAU,EACVC,SAAS,OACTC,UAAU,EACVC,gBAAgB,EAChBC,kBAAkB,EAClBC,KA5BU,WAEVT,EAAQ5Y,SACsC,qBAAvC4Y,EAAQ5Y,QAAQsZ,oBAI3BV,GACIA,EAAQ5Y,SACR4Y,EAAQ5Y,QAAQsZ,mBAAmBC,QAAO,SAACC,GACvCd,EAASc,KACV,mBC8BArO,gBA1C6B,SAAC,GAA8B,IAA5BpF,EAA2B,EAA3BA,QAASpF,EAAkB,EAAlBA,YAAkB,EAC5CiR,mBAAgB,IAD4B,oBAC/D6H,EAD+D,KACxD3B,EADwD,OAE5ClG,mBAAsB,MAFsB,oBAE/D1P,EAF+D,KAExDwW,EAFwD,KAUtE,OANA3G,qBAAU,WACN,OAAO,WACH0H,EAAM9V,SAAQ,SAAAzE,GAAI,OAAIiZ,IAAIuB,gBAAgBxa,EAAKgZ,gBAKnD,cAAC,WAAD,UACI,eAAClG,GAAA,EAAD,WACI,eAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,UACI,cAACY,GAAA,EAAD,CAAQH,MAAM,OAAOoP,KAAG,EAACxR,QAAQ,uBACjC,cAAC,GAAD,CAAqB2P,SAAUA,OAEnC,cAAC9F,GAAA,EAAKO,OAAN,CAAazI,MAAO,IACpB,eAACkI,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,UACI,cAACY,GAAA,EAAD,CAAQiP,KAAG,EAACpP,MAAM,OAAOpC,QAAQ,0BAChCsR,EAAM7O,OAAS,GACZ,cAAC,GAAD,CAAoB8N,SAAUA,EAAUC,aAAcc,EAAM,GAAGvB,aAGvE,cAAClG,GAAA,EAAKO,OAAN,CAAazI,MAAO,IACpB,eAACkI,GAAA,EAAKO,OAAN,CAAazI,MAAO,EAApB,UACI,cAACY,GAAA,EAAD,CAAQiP,KAAG,EAACpP,MAAM,OAAOpC,QAAQ,8BAChCsR,EAAM7O,OAAS,GACZ,eAAC,WAAD,WACI,qBAAKsM,UAAU,cAAc1H,MAAO,CAAE+B,UAAW,QAASqI,SAAU,YACpE,eAAClO,EAAA,EAAOuE,MAAR,CAAcqH,OAAQ,EAAtB,UACA,cAAC5L,EAAA,EAAD,CAAQwJ,UAAQ,EAAC/G,KAAK,QAAQpI,QAASA,EAAS4F,QAAS,kBAAMhL,EAAYuB,MAC3E,cAACwJ,EAAA,EAAD,CAAQmO,UAAQ,EAAC1L,KAAK,QAAQtB,SAAU9G,EAAS4F,QAAS,kBAAMmM,EAAS,wBCqCtF3M,gBA1EO,WAClB,IADwB,EACPe,qBAAW1C,IACiFE,kBAArG1I,EAFgB,EAEhBA,QAASoW,EAFO,EAEPA,cAAezW,EAFR,EAEQA,YAAamI,EAFrB,EAEqBA,eAAgBjI,EAFrC,EAEqCA,aAAcC,EAFnD,EAEmDA,YAAaiF,EAFhE,EAEgEA,QAFhE,EAGgB6L,oBAAS,GAHzB,oBAGjBkI,EAHiB,KAGHC,EAHG,OAIInI,wBAA6BhU,GAJjC,oBAIjB0I,EAJiB,KAIT0T,EAJS,OAKgBpI,wBAA6BhU,GAL7C,oBAKjBqc,EALiB,KAKHC,EALG,KAUxB,OACI,cAACC,GAAA,EAAIC,KAAL,UACI,eAACpI,GAAA,EAAD,WACI,eAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAAI0F,MAAO,CAAE6K,cAAe,GAAhD,UACI,cAAC3P,GAAA,EAAD,CAAQsK,QAAQ,OAAO7G,KAAK,QAAQhG,QAAQ,WAC3CiP,GACG,cAAC1L,EAAA,EAAD,CACIC,QAAS,kBAAMoO,GAAiBD,IAChC9E,QAAQ,QACR1K,OAAK,EACLnC,QAAS2R,EAAe,SAAW,iBAI/C,cAAC9H,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACKgQ,EACG,cAAC,GAAD,CACInZ,YArBE,SAACC,GACvBD,EAAYC,GAAO/B,MAAK,kBAAMkb,GAAgB,OAqB1BhU,QAAS+C,IAGT,cAACgO,GAAA,EAAK7G,MAAN,CAAYqK,YAAa,EAAzB,SACKtZ,GACGA,EAAQ+H,OAAOgC,KAAI,SAAAnK,GAAK,OACpB,eAACkW,GAAA,EAAD,WACI,cAACrI,EAAA,EAAD,CAAOf,IAAK9M,EAAMjC,MACjByY,GACG,eAAC1L,EAAA,EAAOuE,MAAR,CAAcrE,OAAK,EAAC0L,OAAQ,EAA5B,UACI,cAAC5L,EAAA,EAAD,CACIC,QAAS,SAAA2H,GACLzS,EAAaD,GACboZ,EAAU1G,EAAE/M,cAAcC,OAE9BA,KAAM5F,EAAMnB,GACZoN,SAAUjM,EAAMoI,OAChBjD,QAASA,GAAWO,IAAW1F,EAAMnB,GACrC6K,OAAK,EACL4K,UAAQ,EACR/M,QAAQ,SAEZ,cAACuD,EAAA,EAAD,CACIlF,KAAM5F,EAAMnB,GACZoN,SAAUjM,EAAMoI,OAChB2C,QAAS,SAAC2H,GACNxS,EAAYF,GACZsZ,EAAgB5G,EAAE/M,cAAcC,OAEpCT,QAASA,GAAWkU,IAAiBrZ,EAAMnB,GAC3C6K,OAAK,EACLuP,UAAQ,EACR1L,KAAK,eA1BVvN,EAAMnB,mBC/BnDqM,GAAWC,6BAAkB,CAC/B9J,YAAa+J,sBAAW,iBA0Cbb,gBAlC2B,SAAC,GAA8B,IAA5BpK,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACtD,OACI,cAAC,KAAD,CACImL,SAAUpL,EACV+K,SAAUA,GACVsI,cAAepT,EACfwK,OAAQ,gBAAGa,EAAH,EAAGA,aAAcE,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,SAAUrG,EAApC,EAAoCA,WAApC,OACJ,eAACgE,GAAA,EAAD,CAAMgC,SAAUE,EAAc7O,OAAK,EAAnC,UACI,cAAC,KAAD,CACIgJ,KAAK,cACLoG,UAAWhD,GACXI,YAAY,eACZvN,MAAOuE,EAASiB,cAEpB,cAAC,KAAD,CACIuE,KAAK,MACLoG,UAAWsG,GACXC,KAAM,EACNnJ,YAAY,MACZvN,MAAOuE,EAASuZ,MAEpB,cAAC7O,EAAA,EAAD,CACI3F,QAASI,EACT6O,QAAQ,QACRnI,SAAUN,GAAWC,EACrB0I,UAAQ,EACR/M,QAAQ,4BCCjBgD,gBAvCY,WACvB,IAD6B,EACZe,qBAAW1C,IAC6BE,kBAAjD0N,EAFqB,EAErBA,cAAepW,EAFM,EAENA,QAASD,EAFH,EAEGA,YAFH,EAGiB6Q,oBAAS,GAH1B,oBAGtB4I,EAHsB,KAGLC,EAHK,KAI7B,OACI,cAACN,GAAA,EAAIC,KAAL,UACI,eAACpI,GAAA,EAAD,WACI,eAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAAI0F,MAAO,CAAE6K,cAAe,GAAhD,UACI,cAAC3P,GAAA,EAAD,CAAQsK,QAAQ,OAAO7G,KAAK,eAAehG,QAAO,gBAAWnH,EAASiB,eACrEmV,GACG,cAAC1L,EAAA,EAAD,CACIC,QAAS,kBAAM8O,GAAoBD,IACnCxF,QAAQ,QACR1K,OAAK,EACLnC,QAASqS,EAAkB,SAAW,oBAIlD,cAACxI,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACK0Q,EACG,cAAC,GAAD,CAAiBzZ,YAAaA,EAAaC,QAASA,IAEhD,eAAC6J,GAAA,EAAD,WACI,eAACA,GAAA,EAAKI,KAAN,WACI,cAACJ,GAAA,EAAKgB,KAAN,CAAWrF,KAAK,WAChB,cAACqE,GAAA,EAAKK,QAAN,UAAelK,EAASuZ,SAE5B,eAAC1P,GAAA,EAAKI,KAAN,WACI,cAACJ,GAAA,EAAKgB,KAAN,CAAWrF,KAAK,SAChB,cAACqE,GAAA,EAAKK,QAAN,UAAelK,EAASR,wBCX7Cka,GAjBuB,SAAC,GAAmB,IAAjBxR,EAAgB,EAAhBA,UACrC,OACI,eAAC4N,GAAA,EAAD,CAAMpK,GAAIkC,IAAMnB,GAAE,mBAAcvE,EAAUxI,UAA1C,UACI,cAAC+N,EAAA,EAAD,CAAOf,IAAKxE,EAAUhH,OAAS,qBAC/B,cAAC4U,GAAA,EAAK5L,QAAN,UACI,cAAC4L,GAAA,EAAKpM,OAAN,UAAcxB,EAAUjH,gBAE5B,cAAC6U,GAAA,EAAK5L,QAAN,CAAciM,OAAK,EAAnB,SACI,gCACI,cAACtL,EAAA,EAAD,CAAMrF,KAAK,SACV0C,EAAUC,eAFf,sBCqBDwR,GA/BW,WACtB,IAD4B,EACXzO,qBAAW1C,IACiCE,kBAArD1I,EAFoB,EAEpBA,QAASwH,EAFW,EAEXA,WAAYzC,EAFD,EAECA,QAASuC,EAFV,EAEUA,UAEtC,OACI,cAAC6R,GAAA,EAAIC,KAAL,CAAUrU,QAASA,EAAnB,SACI,eAACiM,GAAA,EAAD,WACI,cAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,cAACY,GAAA,EAAD,CACIsK,QAAQ,OACR7G,KAAK,OACLhG,QACkB,IAAdG,EAAA,2BAC0BtH,EAASiB,aADnC,iBAEgBjB,EAASiB,YAFzB,qBAMZ,cAAC+P,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,cAACgN,GAAA,EAAK7G,MAAN,CAAYqK,YAAa,EAAzB,SACK9R,EAAWuC,KAAI,SAAC7B,GAAD,OACZ,cAAC,GAAD,CAAsCA,UAAWA,GAA/BA,EAAUxI,uBClBlDka,GAAQ,CACV,CAAEC,SAAU,UAAWC,KAAM,CAAEve,IAAK,WAElCwe,GAAc,CAChB,CAAEF,SAAU,UAAWC,KAAM,CAAEve,IAAK,UACpC,CAAEse,SAAU,eAAgBC,KAAM,CAAEve,IAAK,gBACzC,CAAEse,SAAU,iBAAkBC,KAAM,CAAEve,IAAK,mBA2EhC4O,gBAzEO,WAClB,IAAM0K,EAAW3J,qBAAW1C,IADJ,EAOpBqM,EAASnM,kBAJTsR,EAHoB,EAGpBA,kBACAha,EAJoB,EAIpBA,QACA0H,EALoB,EAKpBA,gBACAE,EANoB,EAMpBA,cAEI9C,EAAe+P,EAAShQ,eAAxBC,WAERiM,qBAAU,WACNiJ,EAAkBha,EAASN,SAAU,YACtC,CAACsa,EAAmBha,IAqBvB,OACI,cAACmZ,GAAA,EAAIC,KAAL,CAAUrU,QAAS2C,EAAnB,SACI,eAACsJ,GAAA,EAAD,WACI,cAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,SACI,cAACY,GAAA,EAAD,CAAQsK,QAAQ,OAAO7G,KAAK,OAAOhG,QAAS,gBAEhD,eAAC6J,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,UACI,cAACqQ,GAAA,EAAD,CACIS,MAAO9U,EAAaiV,GAAcH,GAClCK,KAAM,CAAExK,WAAW,EAAMnD,UAAU,GACnC4N,YAAa,SAAC5H,EAAGvV,GAAJ,OA7BT,SACpBuV,EACAvV,GAEA,IAAIqD,EACJ,OAAQrD,EAAK0K,aACT,KAAK,EACDrH,EAAY,OACZ,MACJ,KAAK,EACDA,EAAY,SACZ,MACJ,QACIA,EAAY,SAGpB4Z,EAAkBha,EAASN,SAAUU,GAaK+Z,CAAgB7H,EAAGvV,MAEjD,uBACA,cAAC+Y,GAAA,EAAK7G,MAAN,CAAYqK,YAAa,EAAzB,SACK1R,EAAcmC,KAAI,SAACpL,GAAD,OACf,eAACmX,GAAA,EAAD,CACIpK,GAAIkC,IACJnB,GAAE,oBAAe9N,EAASF,IAF9B,UAKI,cAACgP,EAAA,EAAD,CACIf,IAAG,kBAAa/N,EAASuQ,MAAtB,QACHV,MAAO,CAAE+B,UAAW,IAAK6J,UAAW,WAExC,eAACtE,GAAA,EAAK5L,QAAN,WACI,cAAC4L,GAAA,EAAKpM,OAAN,CAAaiC,UAAU,SAAvB,SAAiChN,EAASuQ,QAC1C,eAAC4G,GAAA,EAAKG,KAAN,CAAWtK,UAAU,SAArB,UACI,8BAAM4D,aAAO,IAAI9O,KAAK9B,EAAS2D,MAAO,YACtC,8BAAMiN,aAAO,IAAI9O,KAAK9B,EAAS2D,MAAO,oBAVzC3D,EAASF,oBC5DxCmb,GAAQ,CACV,CAAEC,SAAU,QAASrP,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAAEqP,SAAU,SAAUrP,OAAQ,kBAAM,cAAE,GAAF,MACpC,CACIqP,SAAU,YAAarP,OAAQ,kBAAM,cAAC6P,GAAD,MACzC,CAAER,SAAU,YAAarP,OAAQ,kBAAM,cAAC,GAAD,MACvC,CAAEqP,SAAU,YAAarP,OAAQ,kBAAM,cAAC,GAAD,OAiB5B8P,GAV0B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAwB,OAC5D,cAACpB,GAAA,EAAD,CACIc,KAAM,CAAErP,OAAO,EAAMoF,UAAU,GAC/BwK,aAAa,QACbZ,MAAOA,GACPM,YAAa,SAAC5H,EAAGvV,GAAJ,OAAawd,EAAaxd,EAAK0K,iBCkBzC0C,gBA5BuB,SAAC,GAAe,IAAb0I,EAAY,EAAZA,MAC/BgC,EAAW3J,qBAAW1C,IADqB,EAEwDqM,EAASnM,kBAA1G+R,EAFyC,EAEzCA,YAAaza,EAF4B,EAE5BA,QAAS6H,EAFmB,EAEnBA,eAAgB5H,EAFG,EAEHA,OAAQC,EAFL,EAEKA,SAAUkW,EAFf,EAEeA,cAAerR,EAF9B,EAE8BA,QAASwV,EAFvC,EAEuCA,aAChFzV,EAAe+P,EAAShQ,eAAxBC,WAKR,OAHAiM,qBAAU,WACN0J,EAAY5H,EAAMtU,OAAOmB,YAC1B,CAAC+a,EAAa5H,IACbhL,EAAuB,cAAC,GAAD,CAASV,QAAQ,wBAGxC,cAAC6J,GAAA,EAAD,UACI,eAACA,GAAA,EAAKO,OAAN,CAAazI,MAAO,GAApB,UACI,cAAC,GAAD,CACI9I,QAASA,EACTC,OAAQA,EACRC,SAAUA,EACVkW,cAAeA,EACfrR,QAASA,EACTD,WAAYA,IAEhB,cAAC,GAAD,CAAgByV,aAAcA,Y,qBCK/BG,GAlCwC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9Cnb,EAAUob,KAAY5U,MAAM2U,EAASE,QAArCrb,MAMR,OACI,eAACwP,GAAA,EAAD,CAAShG,aAAW,EAApB,UACI,eAACU,GAAA,EAAD,CAAQyD,MAAI,EAAZ,UACI,cAACtC,EAAA,EAAD,CAAMrF,KAAK,UADf,4BAIA,cAACwJ,GAAA,EAAQ8L,OAAT,UACI,sBAAK5E,UAAU,SAAf,UACI,gHAGC1W,GACG,qCACI,iGACA,cAACkL,EAAA,EAAD,CAAQC,QAnBF,WAC1B3F,GAAgBvF,mBAAmBD,GAAiB3B,MAAK,WACrDf,IAAMie,QAAQ,6BACf1W,OAAM,SAACiO,GAAD,OAAOrO,QAAQC,IAAIoO,OAiBJqD,SAAO,EACPxO,QAAQ,eACRkH,KAAK,qBC6CtB2M,GAnEoC,SAAC,GAAkB,IAAhBL,EAAe,EAAfA,SAC5CrZ,EAAiB4J,qBAAW1C,IAC5ByS,EACS,YADTA,EAEM,SAFNA,EAGO,UAGPC,EAAwB,WAC1BlW,GAAgBvF,mBAAmBD,GAAiB3B,MAAK,WACrDf,IAAMie,QAAQ,6BACf1W,OAAM,SAACiO,GAAD,OAAOrO,QAAQC,IAAIoO,OAXiC,EAarC1B,mBAASqK,GAb4B,oBAa1Dje,EAb0D,KAalDme,EAbkD,KAczD/O,EAAc9K,EAAeoF,gBAA7B0F,UAdyD,EAexCwO,KAAY5U,MAAM2U,EAASE,QAA5C3e,EAfyD,EAezDA,MAAOsD,EAfkD,EAelDA,MAEfuR,qBAAU,WACN/L,GAAgBzF,YAAYrD,EAAiBsD,GAAiB3B,MAAK,kBAAMsd,EAAUF,MAC9E5W,OAAM,kBAAM8W,EAAUF,QAC5B,CAACA,EAAeA,EAAgB/e,EAAOsD,IAkC1C,OACI,eAACwP,GAAA,EAAD,CAAShG,aAAW,EAApB,UACI,eAACU,GAAA,EAAD,CAAQyD,MAAI,EAAZ,UACI,cAACtC,EAAA,EAAD,CAAMrF,KAAK,aADf,wBAIA,cAACwJ,GAAA,EAAQ8L,OAAT,UAtCQ,WACZ,OAAQ9d,GACJ,KAAMie,EACF,OACI,8CAGR,KAAMA,EACF,OACI,sBAAK/E,UAAU,SAAf,0BACI,6EACA,cAACxL,EAAA,EAAD,CACIC,QAASuQ,EACTvF,SAAO,EACPxO,QAAQ,eACRkH,KAAK,YAIrB,KAAM4M,EACF,OACI,sBAAK/E,UAAU,SAAf,0BACI,6EACA,cAACxL,EAAA,EAAD,CAAQC,QAAS,kBAAMyB,EAAU,cAACgP,GAAD,MAC7BzF,SAAO,EACPxO,QAAQ,QACRkH,KAAK,cAahBgN,SClDFC,GAhBE,WACb,OACI,eAACtM,GAAA,EAAD,CAAShG,aAAW,EAApB,UACI,eAACU,GAAA,EAAD,CAAQyD,MAAI,EAAZ,UACI,cAACtC,EAAA,EAAD,CAAMrF,KAAK,WADf,iBAIA,cAACwJ,GAAA,EAAQ8L,OAAT,UACI,cAACpQ,EAAA,EAAD,CAAQgB,GAAIkC,IAAMnB,GAAG,cAAckJ,SAAO,EAA1C,+C,UCGDxL,gBAVQ,WACnB,IADyB,EACRe,qBAAW1C,IAC2B9B,gBAA/CC,EAFiB,EAEjBA,WAFiB,IAELS,MAASF,EAFJ,EAEIA,KAAMpJ,EAFV,EAEUA,KACnC,OACI,cAACyd,GAAA,EAAD,CAAOrU,KAAMA,EAAMsU,QAAS7U,EAAY0H,KAAK,OAA7C,SACI,cAACkN,GAAA,EAAMrR,QAAP,UAAgBpM,SC4Cb2d,eAAWtR,aArCiB,SAAC,GAAkB,IAAhBwQ,EAAe,EAAfA,SACpCrZ,EAAiB4J,qBAAW1C,IADuB,EAEdlH,EAAeqC,iBAAlDzH,EAFiD,EAEjDA,MAAOwf,EAF0C,EAE1CA,aAAc3U,EAF4B,EAE5BA,UACrB4U,EAAYra,EAAeuD,eAA3B8W,QAUR,OARA5K,qBAAU,WACF7U,IAAU6K,EACV4U,IAAUxI,SAAQ,kBAAMuI,OAGxBA,MAEL,CAACC,EAAS5U,EAAW7K,EAAOwf,IAC1B3U,EAED,gCACI,cAAC,GAAD,IACA,eAAC,WAAD,WACI,cAAC,IAAD,CAAgBqG,SAAS,iBACzB,cAAC,GAAD,IACA,cAACwO,EAAA,EAAD,CAAWpN,MAAO,CAAEyB,UAAW,OAA/B,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOzD,OAAK,EAACqP,KAAK,IAAIjQ,UAAWkQ,KACjC,cAAC,IAAD,CAAOtP,OAAK,EAACqP,KAAK,aAAajQ,UAAWkQ,KAC1C,cAAC,IAAD,CAA0BtP,OAAK,EAACqP,KAAM,CAAC,kBAAmB,eAAgBjQ,UAAWmQ,IAAzEpB,EAASpf,KACrB,cAAC,IAAD,CAAOsgB,KAAK,sBAAsBjQ,UAAWoQ,KAC7C,cAAC,IAAD,CAAOH,KAAK,qBAAqBjQ,UAAWqQ,KAC5C,cAAC,IAAD,CAAOJ,KAAK,wBAAwBjQ,UAAW8O,KAC/C,cAAC,IAAD,CAAOmB,KAAK,oBAAoBjQ,UAAWoP,KAC3C,cAAC,IAAD,CAAOpP,UAAW0P,gBAhBf,cAAC,GAAD,CAASnU,QAAQ,wB,uBClBxB+U,QACW,cAA7B/f,OAAOwe,SAASwB,UAEe,UAA7BhgB,OAAOwe,SAASwB,UAEhBhgB,OAAOwe,SAASwB,SAAStJ,MACvB,2D,yBCPS4I,gBARK,SAAC,GAA+C,IAA7CW,EAA4C,EAA5CA,SAAsBC,EAAsB,EAAlC1B,SAAY0B,SAMzC,OAJAtL,qBAAU,WACN5U,OAAOmgB,SAAS,EAAG,KACpB,CAACD,IAEGD,KCGXG,OAEO,IAAMtf,GAAUuf,eAEvBC,IAASjS,OACL,cAAC,IAAD,CAAQvN,QAASA,GAAjB,SACI,cAAC,GAAD,UACI,cAAC,GAAD,QAGRyf,SAASC,eAAe,SFqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjf,MAAK,SAAAkf,GACJA,EAAaC,gBAEd3Y,OAAM,SAAA7H,GACLyH,QAAQzH,MAAMA,EAAMkI,c","file":"static/js/main.f5a5ff65.chunk.js","sourcesContent":["export const ITList = [\r\n    { key: 'All', text: 'All development', value: '0.0' },\r\n    { key: 'Web', text: 'Web', value: 'Web' },\r\n    { key: 'Game', text: 'Game', value: 'Game' },\r\n    { key: 'Mobil', text: 'Mobil', value: 'Mobil' },\r\n    { key: 'WebC', text: 'Conception Web', value: 'WebC' },\r\n    { key: 'Graphic', text: 'Graphic Conception', value: 'Graphic' },\r\n    { key: 'Animation', text: 'Animation', value: 'Animation' },\r\n    { key: '3D', text: '3D', value: '3D' },\r\n    { key: 'Finance', text: 'Finance', value: 'Finance' },\r\n    { key: 'Entrepreneurship', text: 'Entrepreneurship', value: 'Entrepreneurship' },\r\n    { key: 'Gestion', text: 'Gestion', value: 'Gestion' }\r\n];","import { ITraining, ITrainingEnvelope } from '../models/ITraining';\r\nimport { IProfile, IPhoto } from '../models/IPorfile';\r\nimport { IUser, IUserFromValues } from '../models/IUser';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n//we can found this modifcations in (inspector => Network => request => header)\r\naxios.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error)\r\n})\r\n\r\naxios.interceptors.response.use(undefined, (error) => {\r\n    if (error.messagge === 'Network Error' && !error.response)\r\n        toast.error('Network error - make sure API is running!')\r\n    const { data, status, config, headers } = error.response;\r\n    if (!error.response)\r\n        toast.error(\"Network error - Please check your connection \");\r\n    if (status === 404)\r\n        history.push('/notfound');\r\n    if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n        window.localStorage.removeItem('jwt');\r\n        history.push('/');\r\n        toast.info(\"Your session is expired, please login again\");\r\n    }\r\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id'))\r\n        history.push('/notfound');\r\n    if (status === 500)\r\n        toast.error(\"server error - check the terminal for more info!\");\r\n    throw error.response;\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms))\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    delete: (url: string) => axios.delete(url).then(responseBody),\r\n    postForm: (url: string, file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post(url, formData, {\r\n            headers: { 'content-type': 'multipart/form-data' }\r\n        }).then(responseBody)\r\n    }\r\n};\r\n//(Communication bteween controller and Client-app)\r\n//training Agent \r\nconst trainingAgent = {\r\n    list: (params: URLSearchParams): Promise<ITrainingEnvelope> =>\r\n        axios.get('/training', { params: params }).then(responseBody),\r\n    details: (id: string) => requests.get(`/training/${id}`),\r\n    create: (training: ITraining) => requests.post('/training', training),\r\n    update: (training: ITraining) => requests.put(`/training/${training.trainingId}`, training),\r\n    delete: (id: string | undefined) => requests.delete(`/training/${id}`),\r\n    buy: (id: string | undefined) => requests.post(`/training/${id}/buy`, {}),\r\n    refund: (id: string | undefined) => requests.delete(`/training/${id}/buy`),\r\n}\r\n\r\n//Profile agent\r\nconst profileAgent = {\r\n    get: (username: string): Promise<IProfile> => requests.get(`/profile/${username}`),\r\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photo`, photo),\r\n    setMainPhoto: (id: string) => requests.post(`/photo/${id}/setmain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photo/${id}`),\r\n    editProfile: (profile: Partial<IProfile>) => requests.put(`/profile`, profile),\r\n    follow: (username: string) => requests.post(`/profile/${username}/follow`, {}),\r\n    unfollow: (username: string) => requests.delete(`/profile/${username}/follow`),\r\n    listFollowings: (username: string, predicate: string) => requests.get(`/profile/${username}/follow?predicate=${predicate}`),\r\n    listTrainings: (username: string, predicate: string) => requests.get(`/profile/${username}/trainings?predicate=${predicate}`),\r\n}\r\n//User Agent\r\nconst userAgent = {\r\n    current: (): Promise<IUser> => requests.get('/user'),\r\n    login: (user: IUserFromValues): Promise<IUser> => requests.post(`/user/login`, user),\r\n    register: (user: IUserFromValues): Promise<IUser> => requests.post(`/user/register`, user),\r\n    fbLogin: (accessToken: string) => requests.post(`/user/facebook`, { accessToken }),\r\n    refreshToken: (): Promise<IUser> => requests.post(`/user/refreshToken`, {}),\r\n    verifyEmail: (token: string, email: string): Promise<IUser> => requests.post(`user/verfiyEmail`, { token, email }),\r\n    resendEmailConfirm: (email: string): Promise<void> => requests.get(`/user/resendEmailVerification?email=${email}`)\r\n}\r\nexport default {\r\n    trainingAgent,\r\n    userAgent,\r\n    profileAgent\r\n}","import { ITraining, IBuyer } from \"../../models/ITraining\";\r\nimport { IUser } from \"../../models/IUser\";\r\n\r\nexport const combineTimeAndDate = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const stringDate = `${year}-${month}-${day}`;\r\n    return new Date(stringDate);\r\n}\r\n\r\nexport const setTrainingProps = (training: ITraining, user: IUser, isLogged: boolean) =>\r\n{\r\n    training.dateOfCreation = new Date(training.dateOfCreation);\r\n    if (isLogged) {\r\n        training.isBuyer = training.buyers!.some(\r\n            a => a.username === user.username\r\n        )\r\n        training.isOwner = training.buyers!.some(\r\n            b => b.username === user.username && b.isOwner\r\n        )\r\n    }\r\n    return training;\r\n}\r\n\r\nexport const soldTraining = (user: IUser): IBuyer => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isOwner: false,\r\n        username: user.username,\r\n        image: user.image!,\r\n    }\r\n}\r\n","import { observable, action, computed, runInAction, reaction } from 'mobx'\r\nimport agent from '../agent/agent';\r\nimport { ITraining } from '../models/ITraining';\r\nimport { history } from '../../index';\r\nimport { toast } from 'react-toastify';\r\nimport { BaseRepository } from './baseRepository'\r\nimport { setTrainingProps, soldTraining } from '../common/util/util';\r\nimport { SyntheticEvent } from 'react';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport default class TrainingRepository {\r\n\r\n    _baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this._baseRepository = baseRepository;\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.page = 0;\r\n                this.trainingRegestry.clear();\r\n                this.loadTrainings();\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    @observable training: ITraining | null = null;\r\n    @observable loading = false;\r\n    @observable submitting = false;\r\n    @observable trainingRegestry = new Map();\r\n    @observable target = '';\r\n    @observable loadingBuy = false;\r\n    //the hole class will be observe it (Hub connexion SignalR)\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n    @observable trainingCount = 0;\r\n    @observable page = 0\r\n    @observable predicate = new Map();\r\n\r\n    @action setPredicate = (predicate: string, value: string | Date) => {\r\n        this.predicate.clear();\r\n        if (predicate !== 'all') {\r\n            this.predicate.set(predicate, value);\r\n        }\r\n    }\r\n\r\n    @computed get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('limit', String(LIMIT));\r\n        params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, value.toISOString())\r\n            } else {\r\n                params.append(key, value)\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    @computed get trainingByDate() {\r\n        return this.sortByDate(Array.from(this.trainingRegestry.values()));\r\n    }\r\n\r\n    @computed get totalPages() {\r\n        return Math.ceil(this.trainingCount / LIMIT);\r\n    }\r\n    @action setPage = (page: number) => {\r\n        this.page = page;\r\n    }\r\n\r\n    //Hub for Signal token connection\r\n    @action createHubConnection = (trainingId: string) => {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            //this url must have the same url of server\r\n            .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n                accessTokenFactory: () => this._baseRepository.commonRepository.token!\r\n            })\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n        this.hubConnection.start()\r\n            .then(() => console.log(this.hubConnection!.state))\r\n            .then(() => {\r\n                console.log(\"Attempting to join group\");\r\n                //have to much to same name of methode chatHub\r\n                this.hubConnection!.invoke('AddToGroup', trainingId);\r\n            })\r\n            .catch(error => console.log('Error estabilshed connection', error));\r\n        //this must match the same of ReceiveComment in chatHub\r\n        this.hubConnection.on('ReceiveComment', comment => {\r\n            runInAction(() => {\r\n                this.training!.comments.push(comment);\r\n            })\r\n        })\r\n        this.hubConnection.on('Send', message => {\r\n            toast.info(message);\r\n        })\r\n    }\r\n\r\n    @action stopHubConnection = () => {\r\n        this.hubConnection!.invoke('RemoveFromGroup', this.training?.trainingId)\r\n            .then(() => {\r\n                this.hubConnection?.stop()\r\n            }).then(() => console.log('Connection stopped'))\r\n            .catch(err => console.log(err));\r\n        this.hubConnection!.stop();\r\n    }\r\n\r\n    @action addcomment = async (values: any) => {\r\n        values.trainingId = this.training?.trainingId;\r\n        try {\r\n            //SendComment must have the same name of methode in hubChat\r\n            await this.hubConnection!.invoke('SendComment', values)\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    sortByDate(trainings: ITraining[]) {\r\n        const sortedTrainings = trainings.sort((a, b) => a.dateOfCreation!.getDate() - b.dateOfCreation!.getDate());\r\n        return Object.entries(sortedTrainings.reduce((trainings, training) => {\r\n            const date = training.dateOfCreation!.toISOString().split('T')[0];\r\n            trainings[date] = trainings[date] ? [...trainings[date], training] : [training];\r\n            return trainings;\r\n        }, {} as { [key: string]: ITraining[] }));\r\n    }\r\n\r\n    @action loadTrainings = async () => {\r\n        const isLogged = this._baseRepository.userRepository.isLoggedIn;\r\n        this.loading = true;\r\n        try {\r\n            const trainingsEnvelope = await agent.trainingAgent.list(this.axiosParams)\r\n            const { trainings, trainingCount } = trainingsEnvelope;\r\n            runInAction(() => {\r\n                trainings.forEach((training) => {\r\n                    setTrainingProps(training, this._baseRepository.userRepository.user!, isLogged);\r\n                    this.trainingRegestry.set(training.trainingId, training);\r\n                    console.log(training.buyers);\r\n                });\r\n                this.trainingCount = trainingCount;\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action createTraining = async (training: ITraining) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.trainingAgent.create(training);\r\n            const buyer = soldTraining(this._baseRepository.userRepository.user!);\r\n            buyer.isOwner = true;\r\n            let buyers = [];\r\n            buyers.push(buyer);\r\n            training.buyers = buyers;\r\n            training.isOwner = true;\r\n            training.comments = [];\r\n            runInAction(() => {\r\n                this.trainingRegestry.set(training.trainingId, training);\r\n                this.training = training;\r\n                this.submitting = false;\r\n            })\r\n            history.push(`/detailTraining/${training.trainingId}`);\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                console.log(error);\r\n            })\r\n            toast.error(\"Error submitting Data\");\r\n        }\r\n    }\r\n\r\n    @action editTraining = async (training: ITraining) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.trainingAgent.update(training);\r\n            runInAction(() => {\r\n                this.trainingRegestry.set(training.trainingId, training);\r\n                this.training = training;\r\n                this.submitting = false;\r\n            })\r\n            history.push(`/detailTraining/${training.trainingId}`);\r\n        }\r\n        catch (error) {\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.submitting = false;\r\n            })\r\n            toast.error(\"Error submitting Data\");\r\n        }\r\n    }\r\n\r\n    @action deleteTraining = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        try {\r\n            await agent.trainingAgent.delete(id)\r\n            runInAction(() => {\r\n                this.trainingRegestry.delete(id);\r\n                this.training = null;\r\n                this.submitting = false;\r\n                this.target = '';\r\n            })\r\n        } catch (e) {\r\n            runInAction(() => {\r\n                console.log(e);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            })\r\n        }\r\n    }\r\n\r\n    @action loadTraining = async (id: string) => {\r\n        const isLogged = this._baseRepository.userRepository.isLoggedIn;\r\n        let training = this.getTraining(id);\r\n        if (training) {\r\n            this.training = training;\r\n            return training;\r\n        } else {\r\n            try {\r\n                this.loading = true;\r\n                training = await agent.trainingAgent.details(id);\r\n                runInAction(() => {\r\n                    setTrainingProps(training, this._baseRepository.userRepository.user!, isLogged);\r\n                    this.training = training;\r\n                    this.loading = false;\r\n                    console.log(training);\r\n                    return training;\r\n                });\r\n            } catch (e) {\r\n                runInAction(() => {\r\n                    console.log(e);\r\n                    this.loading = false;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    @action buyTraining = async () => {\r\n        const buyer = soldTraining(this._baseRepository.userRepository.user!);\r\n        this.loadingBuy = true;\r\n        try {\r\n\r\n            await agent.trainingAgent.buy(this.training!.trainingId);\r\n            runInAction(() => {\r\n                if (this.training) {\r\n                    this.training.buyers!.push(buyer);\r\n                    this.training.isBuyer = true;\r\n                    this.trainingRegestry.set(this.training.trainingId, this.training);\r\n                    this.loadingBuy = false;\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingBuy = false;\r\n            })\r\n            toast.error('Problem buying course')\r\n        }\r\n    }\r\n\r\n    @action refundTraining = async () => {\r\n        this.loadingBuy = true;\r\n        try {\r\n            await agent.trainingAgent.refund(this.training!.trainingId);\r\n            runInAction(() => {\r\n                if (this.training) {\r\n                    this.training.buyers = this.training.buyers!.filter(b => b.username !== this._baseRepository.userRepository.user!.username);\r\n                    this.training.isBuyer = false;\r\n                    this.trainingRegestry.set(this.training.trainingId, this.training);\r\n                    this.loadingBuy = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingBuy = false;\r\n            })\r\n            toast.error('Problem buying course')\r\n        }\r\n    }\r\n\r\n    @action getTraining = (id: string) => {\r\n        return this.trainingRegestry.get(id);\r\n    }\r\n\r\n    @action selectTraining = (id: string) => {\r\n        this.training = this.trainingRegestry.get(id);\r\n    }\r\n    @action clearTraining = () => {\r\n        this.training = null;\r\n    }\r\n}\r\n","import { observable, computed, action, runInAction } from 'mobx';\r\nimport { IUser, IUserFromValues } from '../models/IUser';\r\nimport agent from '../agent/agent';\r\nimport { history } from '../../index';\r\nimport { BaseRepository } from './baseRepository'\r\n\r\nexport default class UserRepository {\r\n\r\n     refreshTokenTimeOut: any;\r\n    _baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this._baseRepository = baseRepository;\r\n    }\r\n\r\n    @observable user: IUser | null = null;\r\n    @observable loading = false;\r\n\r\n    @computed get isLoggedIn() { return !!this.user }\r\n\r\n    @action login = async (values: IUserFromValues) => {\r\n        try {\r\n            const user = await agent.userAgent.login(values);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            this._baseRepository.commonRepository.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            this._baseRepository.modalRepository.closeModal();\r\n            history.push('/trainings');\r\n            this._baseRepository.trainingsRepository.loadTrainings();\r\n            console.log(this.user);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action register = async (values: IUserFromValues) => {\r\n        try {\r\n            const user = await agent.userAgent.register(values);\r\n            this._baseRepository.modalRepository.closeModal();\r\n            this._baseRepository.commonRepository.setToken(user.token);\r\n            history.push(`/user/registerSuccess?email=${values.email}`);\r\n            console.log(this.user);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action getUser = async () => {\r\n        try {\r\n            const user = await agent.userAgent.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            this._baseRepository.commonRepository.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action logout = () => {\r\n        this._baseRepository.commonRepository.setToken(null);\r\n        this.user = null;\r\n        this._baseRepository.trainingsRepository.loadTrainings();\r\n    }\r\n\r\n    @action refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.userAgent.refreshToken();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            this._baseRepository.commonRepository.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    @action fbLogin = async (response: any) => {\r\n        this.loading = true;\r\n        try {\r\n            const user = await agent.userAgent.fbLogin(response.accessToken);\r\n            runInAction(() => {\r\n                this.user = user;\r\n                this._baseRepository.commonRepository.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                this._baseRepository.modalRepository.closeModal();\r\n                history.push('/trainings');\r\n                this._baseRepository.trainingsRepository.loadTrainings();\r\n                this.loading = false;\r\n            })\r\n\r\n            console.log(this.user);\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: IUser) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expired = new Date(jwtToken.exp * 1000);\r\n        const timeOut = expired.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeOut = setTimeout(this.refreshToken, timeOut);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeOut);\r\n    }\r\n}\r\n","import { BaseRepository } from './baseRepository'\r\nimport { observable, action, reaction } from 'mobx';\r\n\r\nexport default class commonRepository {\r\n\r\n    baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this.baseRepository = baseRepository\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token =>\r\n            {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');;\r\n    @observable appLoaded = false;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { BaseRepository } from './baseRepository'\r\nimport { observable, action } from 'mobx';\r\n\r\nexport default class ModalRepository {\r\n    baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this.baseRepository = baseRepository;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    @action openModal = (content: any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n\r\n    @action closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n","import { BaseRepository } from './baseRepository'\r\nimport { observable, runInAction, action, computed, reaction } from 'mobx';\r\nimport { IProfile, IPhoto, IUserTraining } from '../models/IPorfile';\r\nimport agent from '../agent/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\nexport default class ProfileRepository {\r\n    baseRepository: BaseRepository\r\n    constructor(baseRepository: BaseRepository) {\r\n        this.baseRepository = baseRepository;\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'followings';\r\n                    this.loadFollowings(predicate)\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable profile: IProfile | null = null;\r\n    @observable loadingProfile = true;\r\n    @observable uploadingPhoto = false;\r\n    @observable loading = false;\r\n    @observable followings: IProfile[] = [];\r\n    @observable activeTab: number = 0;\r\n    @observable userTrainings: IUserTraining[] = [];\r\n    @observable loadingTraining = false;\r\n\r\n    @computed get isCurrentUser() {\r\n        if (this.baseRepository.userRepository.user && this.profile)\r\n            return this.baseRepository.userRepository.user.username === this.profile.username;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    @action setActiveTab = (activeIndex: number) => {\r\n        this.activeTab = activeIndex;\r\n    } \r\n\r\n    @action loadUserTrainings = async (username: string, predicate?: string) => {\r\n        this.loadingTraining = true;\r\n        try {\r\n            const userTraining = await agent.profileAgent.listTrainings(username, predicate!);\r\n            runInAction(() => {\r\n                this.userTrainings = userTraining;\r\n                this.loadingTraining = false;\r\n            })\r\n        } catch (e) {\r\n            toast.error(\"Problem Uploading photo!\");\r\n            runInAction(() => {\r\n                this.loadingTraining = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action loadProfile = async (username: string) => {\r\n        try {\r\n            const profile = await agent.profileAgent.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const photo = await agent.profileAgent.uploadPhoto(file);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos.push(photo);\r\n                    if (photo.isMain && this.baseRepository.userRepository.user) {\r\n                        this.baseRepository.userRepository.user.image = photo.url;\r\n                        this.profile.image = photo.url;\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploadingPhoto = false;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Problem Uploading photo!\");\r\n            runInAction(() => {\r\n                this.uploadingPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action setMainPhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.setMainPhoto(photo.id);\r\n            runInAction(() => {\r\n                this.baseRepository.userRepository.user!.image = photo.url;\r\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n                this.profile!.image = photo.url;\r\n                this.loading = false;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Problem setting photo as main!\");\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    };\r\n\r\n    @action deletePhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                this.profile!.photos = this.profile!.photos.filter(a => a.id !== photo.id);\r\n                this.loading = false;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Problem deleting photo!\");\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action editProfile = async (profile: Partial<IProfile>) => {\r\n        try {\r\n            await agent.profileAgent.editProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName !== this.baseRepository.userRepository.user!.displayName) {\r\n                    this.baseRepository.userRepository.user!.displayName = profile.displayName!;\r\n                }\r\n                this.profile = { ...this.profile!, ...profile }\r\n            })\r\n        } catch (e) {\r\n            toast.error(\"Problem updating profile\");\r\n            runInAction(() => {\r\n            })\r\n        }\r\n    }\r\n\r\n    @action follow = async (username: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.follow(username);\r\n            runInAction(() => {\r\n                this.profile!.following = true;\r\n                this.profile!.followersCount++;\r\n                this.loading = false;\r\n                console.log(this.profile!.followingsCount);\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problem following user');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    @action unfollow = async (username: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.unfollow(username);\r\n            runInAction(() => {\r\n                this.profile!.following = false;\r\n                this.profile!.followersCount--;\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problem unfollowing user');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    @action loadFollowings = async (predicate: string) => {\r\n        this.loading = true;\r\n        try {\r\n            const profiles = await agent.profileAgent.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = profiles;\r\n                this.loading = false;\r\n            })\r\n        } catch (e) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    };\r\n}\r\n","import TrainingRepository from './trainingRepository';\r\nimport UserRepository from './userRepository';\r\nimport CommonRepository from './commonRepository';\r\nimport ModalRepository from './modalRepository';\r\nimport ProfileRepository from './profileRepository';\r\nimport { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class BaseRepository {\r\n\r\n    trainingsRepository: TrainingRepository;\r\n    userRepository: UserRepository;\r\n    commonRepository: CommonRepository;\r\n    modalRepository: ModalRepository;\r\n    profileRepository: ProfileRepository;\r\n\r\n    constructor() {\r\n        this.trainingsRepository = new TrainingRepository(this);\r\n        this.userRepository = new UserRepository(this);\r\n        this.commonRepository = new CommonRepository(this);\r\n        this.modalRepository = new ModalRepository(this);\r\n        this.profileRepository = new ProfileRepository(this);\r\n    }\r\n}\r\nexport const BaseRepositoryContext = createContext(new BaseRepository());","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextInput: React.FC<IProps> = ({ input, width, type, placeholder, meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} type={type} width={width} >\r\n            <input {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport { AxiosResponse } from 'axios';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    error: AxiosResponse,\r\n    text?: string,\r\n}\r\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>{error.statusText}</Message.Header>\r\n            {error.data && Object.keys(error.data.errors).length > 0 && (\r\n                <Message.List>\r\n                    {Object.values(error.data.errors).flat().map((err: any, i) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n            {text && <Message.Content content={text} />}\r\n        </Message>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import React from 'react';\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    fbCallBack: (response: any) => void;\r\n    loading: boolean;\r\n}\r\n\r\nconst SocialLogin: React.FC<IProps> = ({ fbCallBack, loading }) => {\r\n    return (\r\n        <div>\r\n            <FacebookLogin\r\n                appId='366656587886217'\r\n                fields='name,email,picture'\r\n                callback={fbCallBack}\r\n                render={(renderProps: any) => (\r\n                    <Button onClick={renderProps.onClick} type=\"button\" fluid color=\"facebook\" loading={loading}>\r\n                        <Icon name=\"facebook\" />\r\n                        Login with Facebook\r\n                    </Button>\r\n                    )}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default observer(SocialLogin);","import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, Header, Divider } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/inputText';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { IUserFromValues } from '../../app/models/IUser';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport SocialLogin from './SocialLogin';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst validate = combineValidators({\r\n    email: isRequired('email'),\r\n    password: isRequired('password'),\r\n})\r\n\r\nconst LoginFrom = () => {\r\n    const baseReposiitory = useContext(BaseRepositoryContext);\r\n    const { login, fbLogin, loading } = baseReposiitory.userRepository;\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFromValues) => login(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validate}\r\n            render={({ handleSubmit, submitting, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header as='h2' content='Login to Fasserly' color='blue' textAlign='center' />\r\n                    <Field name='email' component={TextInput} placeholder='Email' />\r\n                    <Field name='password' component={TextInput} placeholder='Password' type='Password' />\r\n                    {submitError && !dirtySinceLastSubmit && <ErrorMessage error={submitError} text={submitError.status === 401 ? ' Unauthorized Invalid email or password' : 'unknown'}/>}\r\n                    <Button\r\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine  }\r\n                        loading={submitting}\r\n                        color='blue'\r\n                        content='Login'\r\n                        fluid\r\n                    />\r\n                    <Divider horizontal>OR</Divider>\r\n                    <SocialLogin loading={loading} fbCallBack={fbLogin} />\r\n                </Form>                \r\n                )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default observer(LoginFrom);\r\n","import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/inputText';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { IUserFromValues } from '../../app/models/IUser';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\n\r\nconst validate = combineValidators({\r\n    email: isRequired('email'),\r\n    username: isRequired('username'),\r\n    diplayName: isRequired('diplayName'),\r\n    password: isRequired('password'),\r\n})\r\n\r\nconst RegisterFrom = () => {\r\n    const baseReposiitory = useContext(BaseRepositoryContext);\r\n    const { register } = baseReposiitory.userRepository;\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFromValues) => register(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validate}\r\n            render={({ handleSubmit, submitting, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header as='h2' content='Sign Up to Fasserly' color='blue' textAlign='center' />\r\n                    <Field name='username' component={TextInput} placeholder='username' />\r\n                    <Field name='diplayName' component={TextInput} placeholder='diplayName' />\r\n                    <Field name='email' component={TextInput} placeholder='Email' />\r\n                    <Field name='password' component={TextInput} placeholder='Password' type='Password' />\r\n                    {submitError && !dirtySinceLastSubmit && <ErrorMessage error={submitError} />}\r\n                    <Button\r\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n                        loading={submitting}\r\n                        color='blue'\r\n                        content='Register'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default RegisterFrom;\r\n","import React, { useContext } from 'react';\r\nimport { Menu, Input, Button, Dropdown, Icon, Image } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport { ITList } from '../../app/common/options/ITOptions'\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport LoginFrom from '../User/LoginForm';\r\nimport RegisterForm from '../User/RegisterForm';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const baseReposiitory = useContext(BaseRepositoryContext);\r\n    const { isLoggedIn, user, logout } = baseReposiitory.userRepository;\r\n    const { openModal } = baseReposiitory.modalRepository;\r\n\r\n    return (\r\n        <div>\r\n            <Menu pointing>\r\n                <Menu.Item as={NavLink} exact to='/trainings' name='home'>\r\n                    <img src='/assets/Logo.png' alt='Logo' height='30px' width='30' />\r\n                </Menu.Item>\r\n                <Dropdown\r\n                    item\r\n                    simple\r\n                    text='Categories'\r\n                    direction='right'\r\n                    options={ITList}\r\n                />\r\n                <Menu.Item >\r\n                    <Input icon='search' placeholder='Search...' position='left' />\r\n                </Menu.Item>\r\n                {isLoggedIn && user && <Menu.Item>\r\n                    <Button as={NavLink} to='/createTraining' content='Create Training' />\r\n                </Menu.Item>\r\n                }\r\n                <Menu.Item position='right'>\r\n                    <Button animated='vertical' margin='10'>\r\n                        <Button.Content hidden>Basket</Button.Content>\r\n                        <Button.Content visible>\r\n                            <Icon name='shop' />\r\n                        </Button.Content>\r\n                    </Button>\r\n                </Menu.Item>\r\n                {isLoggedIn && user ?\r\n                    (\r\n                        <Menu.Item>\r\n                            <Image avatar spaced='right' src={user.image || '/assets/Logo.png'} />\r\n                            <Dropdown pointing='top right' text={user.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to={`/profile/${user.username}`} text='My profile' icon='user' />\r\n                                    <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    ) : (\r\n                        <Menu.Item>\r\n                            <div>\r\n                                <Button onClick={() => openModal(<LoginFrom />)} basic color='blue'>Sign in</Button>\r\n                                <Button onClick={() => openModal(<RegisterForm />)} color='red'>Sign up</Button>\r\n                            </div>\r\n                        </Menu.Item>)\r\n                }\r\n            </Menu>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default observer(NavBar);\r\n","import React from 'react';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { IBuyer } from '../../app/models/ITraining';\r\n\r\ninterface IProps {\r\n    buyers: IBuyer[] | null\r\n}\r\nconst styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 2\r\n}\r\n\r\nconst TrainingListItemBuyers: React.FC<IProps> = ({ buyers }) => {\r\n    return (\r\n        <List horizontal>\r\n            {buyers && buyers.map((buyer) => (\r\n                <List.Item key={buyer.username} >\r\n                    <Popup header={buyer.displayName}\r\n                        trigger={\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={buyer.image || '/assets/user.jpg'}\r\n                                bordered\r\n                                style={buyer.following ? styles: null}\r\n                            />}\r\n                    />\r\n                </List.Item>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default TrainingListItemBuyers;","import React, { useContext } from 'react';\r\nimport { Item, Button, Segment, Icon, Label, Rating } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ITraining } from '../../app/models/ITraining';\r\nimport { format } from 'date-fns';\r\nimport TrainingListItemBuyers from './TrainingListItemBuyers';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\n\r\nconst trainingImageStyle = {\r\n    filtre: 'Brightness(50%)',\r\n    marginBottom: 3\r\n}\r\n\r\nconst TrainingItem: React.FC<{ training: ITraining }> = ({ training }) => {\r\n    const owner = training.buyers!.filter(x => x.isOwner)[0];\r\n    const _baseRepository = useContext(BaseRepositoryContext);\r\n    const { buyTraining } = _baseRepository.trainingsRepository;\r\n    const { isLoggedIn } = _baseRepository.userRepository;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image as={Link} to={`/detailTraining/${training.trainingId}`} src={`/assets/${training.title}.jpg`} size=\"medium\" style={trainingImageStyle} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/detailTraining/${training.trainingId}`}>\r\n                                {training.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Created By <Link to={`/profile/${owner.username}`}><strong>{owner.displayName}</strong></Link> </Item.Description>\r\n                            <Item.Description><Rating maxRating={5} defaultRating={3} icon='star' size='small' /></Item.Description>\r\n                            {isLoggedIn && training.isOwner && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='orange'\r\n                                        content='You are the trainer this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                            {isLoggedIn && training.isBuyer && !training.isOwner && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='green'\r\n                                        content='You are going to this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock' /> {format(training.dateOfCreation, 'h:mm a')}\r\n                <br />\r\n                <span>{training.description}</span>\r\n            </Segment>\r\n            {isLoggedIn && (\r\n                <Segment secondary>\r\n                    <TrainingListItemBuyers buyers={training.buyers!} />\r\n                </Segment>\r\n\r\n            )}\r\n\r\n            {isLoggedIn && !training.isOwner && !training.isBuyer ? (\r\n                <Segment clearing attached=\"bottom\">\r\n                    <Button color=\"teal\" content=\"Put to basket\" />\r\n                    <Button color=\"orange\" onClick={buyTraining} content=\"Buy now\" />\r\n                </Segment>\r\n\r\n            ) : (\r\n                    <Segment clearing attached=\"bottom\">\r\n                        <Button color=\"teal\" content=\"Put to basket\" />\r\n                    </Segment>\r\n                )\r\n            }\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default TrainingItem;\r\n","import React, { useContext, Fragment } from 'react';\r\nimport { Label, Item } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport TrainingItem from './trainingItem';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { format } from 'date-fns';\r\n\r\nconst TrainingsList = () => {\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { trainingByDate } = baseRepository.trainingsRepository;\r\n    return (\r\n        <Item.Group divided>\r\n            <Fragment>\r\n                {trainingByDate.map(([group, trainings]) => (\r\n                    <Fragment key={group} >\r\n                        <Label size=\"large\" color=\"blue\">\r\n                            {format(new Date(group), 'eeee do MMMM')}\r\n                        </Label>\r\n                        <Item.Group>\r\n                            {trainings.map((training) => (\r\n                                <TrainingItem key={training.trainingId} training={training} />\r\n                            ))}\r\n                        </Item.Group>\r\n                    </Fragment>\r\n                )\r\n                )}\r\n            </Fragment>\r\n        </Item.Group>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingsList);","import React, { Fragment, useContext } from 'react';\nimport { Menu, Header } from 'semantic-ui-react';\nimport { Calendar } from 'react-widgets';\nimport { BaseRepositoryContext } from '../../../app/repositories/baseRepository';\r\nimport { observer } from 'mobx-react-lite';\r\n\nconst TrainingFilters = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const { setPredicate, predicate } = baseRepo.trainingsRepository;\n    return (\n        <Fragment>\n            <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\n                <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\n                <Menu.Item\n                    active={predicate.size === 0}\n                    onClick={() => setPredicate('all', 'true')}\n                    color={'blue'}\n                    name={'all'}\n                    content={'All Courses'}\n                />\n                <Menu.Item\n                    active={predicate.has('isBuyer')}\n                    onClick={() => setPredicate('isBuyer', 'true')}\n                    color={'blue'}\n                    name={'username'}\n                    content={\"My courses\"}\n                />\n                <Menu.Item\n                    active={predicate.has('isOwner')}\n                    onClick={() => setPredicate('isOwner', 'true')}\n                    color={'blue'}\n                    name={'host'}\n                    content={\"I'm owner\"}\n                />\n            </Menu>\n            <Header\n                icon={'calendar'}\n                attached\n                color={'teal'}\n                content={'Select Date'}\n            />\n            <Calendar\n                onChange={date => setPredicate('startDate', date!)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </Fragment>\n    );\n};\n\nexport default observer(TrainingFilters);","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 50 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\nexport default ActivityListItemPlaceholder;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Grid, GridColumn, Loader } from 'semantic-ui-react';\r\nimport TrainingsList from './trainingList';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport TrainingFilters from '../Training/dashboard/TrainingFilters'\r\nimport TrainingItemPlaceholder from '../Training/dashboard/TrainingItemPlaceholder'\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nconst TrainingDashboard: React.FC = () => {\r\n\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { loadTrainings, loading, setPage, page, totalPages } = baseRepository.trainingsRepository;\r\n    const token = window.localStorage.getItem('jwt');\r\n    const { isLoggedIn } = baseRepository.userRepository;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleGetNext = () => {\r\n        setLoadingNext(true);\r\n        setPage(page + 1);\r\n        loadTrainings().then(() => setLoadingNext(false));\r\n    }\r\n    useEffect(() => {\r\n            loadTrainings();\r\n    }, [loadTrainings]);\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                {loading && page === 0 ? <TrainingItemPlaceholder /> : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && page + 1 < totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <TrainingsList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </GridColumn>\r\n            {isLoggedIn && token &&\r\n                <Grid.Column width={6}>\r\n                    <TrainingFilters />\r\n                </Grid.Column>\r\n            }\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingDashboard);","export interface ITrainingEnvelope {\r\n    trainings: ITraining[];\r\n    trainingCount: number;\r\n}\r\nexport interface ITraining {\r\n    trainingId: string;\r\n    title: string;\r\n    description: string;\r\n    language: string;\r\n    rating: number;\r\n    dateOfCreation: Date;\r\n    updateDate?: Date;\r\n    price: string;\r\n    isActive: boolean;\r\n    category: string;\r\n    isBuyer: boolean;\r\n    isOwner: boolean;\r\n    buyers?: IBuyer[];\r\n    comments: IComment[]\r\n}\r\nexport interface ITrainingFormValue extends Partial<ITraining> {\r\n    time?: Date\r\n}\r\nexport interface IComment {\r\n    trainingId: string;\r\n    dateOfComment: string;\r\n    body: string;\r\n    username: string;\r\n    diplayName: string;\r\n    image: string;\r\n}\r\nexport class TrainingFormValues implements ITrainingFormValue {\r\n    trainingId: string = '';\r\n    title: string = '';\r\n    language: string = '';\r\n    price: string = '0';\r\n    rating: number = 0;\r\n    dateOfCreation: Date = new Date(Date.now());\r\n    updateDate: Date = new Date(Date.now());\r\n    description: string = '';\r\n    isActive: boolean = true;\r\n    category: string = '';\r\n\r\n    constructor(init?: TrainingFormValues) {\r\n        Object.assign(this, init)\r\n    }\r\n}\r\n\r\nexport interface IBuyer {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isOwner: boolean;\r\n    following?: boolean;\r\n}\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst InputTextArea: React.FC<IProps> = ({ input, width, rows, placeholder, meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width} >\r\n            <textarea rows={rows} {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default InputTextArea;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst InputSelect: React.FC<IProps> = ({ input, options, width, placeholder, meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width} >\r\n            <Select\r\n                value={input.value}\r\n                onChange={(e, data) => input.onChange(data.value)}\r\n                placeholder={placeholder}\r\n                options={options}\r\n            />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n\r\n    );\r\n}\r\n\r\nexport default InputSelect;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\nimport { DateTimePicker } from 'react-widgets';\r\n\r\ninterface IProps extends FieldRenderProps<Date, HTMLElement>, FormFieldProps { }\r\n\r\nconst InputDate: React.FC<IProps> = ({ id = null, input, width, placeholder, date = false, meta: touched, error, ...rest }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width} >\r\n            <DateTimePicker\r\n                placeholder={placeholder}\r\n                value={input.value || null}\r\n                date={date}\r\n                onChange={input.onChange}\r\n                onBlur={input.onBlur}\r\n                onKeyDown={(e) => e.preventDefault()}\r\n            />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default InputDate;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { TrainingFormValues } from '../../app/models/ITraining';\r\nimport { Form, Button, Segment, Grid, GridColumn } from 'semantic-ui-react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Form as FinalFrom, Field } from 'react-final-form'\r\nimport TextInput from '../../app/common/form/inputText';\r\nimport InputTextArea from '../../app/common/form/inputTextArea';\r\nimport { ITList } from '../../app/common/options/ITOptions';\r\nimport InputSelect from '../../app/common/form/inputSelect';\r\nimport InputDate from '../../app/common/form/inputDate';\r\nimport { combineTimeAndDate } from '../../app/common/util/util';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan } from 'revalidate'\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\n\r\nconst validate = combineValidators({\r\n    title: isRequired({ message: 'title est obligatoir' }),\r\n    category: isRequired({ message: 'category est obligatoir' }),\r\n    description: composeValidators(\r\n        isRequired('description '),\r\n        hasLengthGreaterThan(10)({ message: 'au moin 10 charactéres ' })\r\n    )(),\r\n    price: isRequired({ message: 'price est obligatoir' }),\r\n\r\n})\r\n\r\ninterface IDetailParams {\r\n    id: string;\r\n}\r\nconst TrainingEdit: React.FC<RouteComponentProps<IDetailParams>> = ({ match, history }) => {\r\n\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const {\r\n            submitting,\r\n            loadTraining,\r\n            createTraining,\r\n            editTraining \r\n          } = baseRepository.trainingsRepository;\r\n\r\n    const [training, setTraining] = useState(new TrainingFormValues());\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (match.params.id) {\r\n            setLoading(true);\r\n            loadTraining(match.params.id).then(\r\n                (training) => setTraining(new TrainingFormValues(training))\r\n            ).finally(() => setLoading(false));\r\n        }\r\n    }, [loadTraining, match.params.id]);\r\n\r\n    const handleFinalFormSubmit = (values: any) => {\r\n        console.log(values);\r\n        const dateAndTime = combineTimeAndDate(values.dateOfCreation);\r\n        const { date, time, ...training } = values;\r\n        training.dateOfCreation = dateAndTime;\r\n        if (!training.trainingId) {\r\n            let newTraining = {\r\n                ...training,\r\n                trainingId: uuid()\r\n            };\r\n            console.log(training)\r\n            createTraining(newTraining);\r\n        } else {\r\n            editTraining(training);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <Segment clearing  >\r\n                    <FinalFrom\r\n                        validate={validate} //validator\r\n                        initialValues={training}\r\n                        onSubmit={handleFinalFormSubmit}\r\n                        render={({ handleSubmit, pristine }) =>\r\n                            (\r\n                                <Form onSubmit={handleSubmit} loading={loading}>\r\n                                    <Field component={TextInput} placeholder='Title' name='title' value={training.title} />\r\n                                    <Field component={InputTextArea} rows={2} placeholder='Description' name='description' value={training?.description} />\r\n                                    <Field placeholder='Date' component={InputDate} date={true} name='dateOfCreation' value={training.dateOfCreation} />\r\n                                    <Field component={TextInput} placeholder='Price' name='price' value={training.price} />\r\n                                    <Field component={InputSelect} options={ITList} name='category' value={training?.category} />\r\n                                    <Button.Group floated=\"right\">\r\n                                        <Button disabled={loading} onClick={training.trainingId ? () => history.push(`/detailTraining/${training.trainingId}`) : () => history.push('/trainings')} floated='right' type='button'>Cancel</Button>\r\n                                        <Button.Or />\r\n                                        <Button positive disabled={loading || pristine} loading={submitting} floated='right' type='submit'>Submit</Button>\r\n                                    </Button.Group>\r\n                                </Form>\r\n                            )}\r\n                    />\r\n                </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingEdit);","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst Loading: React.FC<{ inverted?: boolean, content?: string }> = ({ inverted, content }) => {\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport { SegmentGroup, Grid, Icon, Segment } from 'semantic-ui-react';\r\nimport { ITraining } from '../../../app/models/ITraining';\r\nimport { format } from 'date-fns';\r\nconst TrainingDetailInfo: React.FC<{ training: ITraining }> = ({ training }) => {\r\n    return (\r\n        <SegmentGroup>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size=\"large\" color=\"teal\" name=\"info\" />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{training.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment>\r\n                <Grid verticalAlign=\"middle\">\r\n                    <Grid.Column width={1}>\r\n                        <Icon size=\"large\" color=\"teal\" name=\"calendar\" />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{format(training.dateOfCreation, 'do MMMM YYYY')} at {format(training.dateOfCreation, 'h:mm a')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment>\r\n                <Grid verticalAlign=\"middle\">\r\n                    <Grid.Column width={1}>\r\n                        <Icon size=\"large\" color=\"teal\" name=\"euro sign\" />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{training.price}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </SegmentGroup>\r\n    );\r\n}\r\n\r\nexport default TrainingDetailInfo;","import React, { Fragment } from 'react';\r\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IBuyer } from '../../../app/models/ITraining';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    buyers: IBuyer[] | null;\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ buyers }) => {\r\n    return (\r\n\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {buyers!.length} {buyers!.length === 1 ? \"Person\" : \"People\"} participate\r\n      </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {buyers!.map((buyer) =>\r\n                        <Item key={buyer.username} style={{ position: 'relative' }} >\r\n                            {buyer.isOwner && <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                               the trainer\r\n                            </Label>}\r\n                            <Image size='tiny' src={buyer.image || '/assets/user.jpg'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${buyer.username}`}>{buyer.displayName}</Link>\r\n                                </Item.Header>\r\n                                {buyer.following && <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\r\n                                \r\n                            </Item.Content>\r\n                        </Item>\r\n                        )}\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);\r\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\nimport { BaseRepositoryContext } from '../../../app/repositories/baseRepository';\r\nimport { Form as FinalFrom, Field } from 'react-final-form';\r\nimport { Link } from 'react-router-dom';\r\nimport InputTextArea from '../../../app/common/form/inputTextArea';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { formatDistance } from 'date-fns';\r\n\nconst TrainingDetailedChat = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const { createHubConnection, stopHubConnection, addcomment, training } = baseRepo.trainingsRepository;\n    const { isLoggedIn } = baseRepo.userRepository;\n    useEffect(() => {\n        createHubConnection(training!.trainingId);\r\n        return () => {\r\n            stopHubConnection();\r\n        }\r\n    }, [createHubConnection, stopHubConnection, training])\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this course</Header>\n            </Segment>\n            <Segment attached>\n                <Comment.Group>\n                    {training && training.comments && training.comments.map((comment) => (\n                        <Comment key={comment.dateOfComment}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profile/${comment.username}`}>{comment.diplayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistance(new Date(comment.dateOfComment), new Date())}</div>\n                                </Comment.Metadata>\n                                <Comment.Text>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                    {isLoggedIn &&\n                        <FinalFrom\n                        onSubmit={addcomment}\n                        render={({ handleSubmit, submitting, form }) => (\n                            <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                                <Field\n                                    name='body'\n                                    component={InputTextArea}\n                                    rows={2}\n                                    placeholder='Add you comment'\n                                />\n                                <Button\n                                    content='Add Reply'\n                                    labelPosition='left'\n                                    icon='edit'\n                                    primary\n                                    loading={submitting}\n                                />\n                            </Form>\n                        )}\n                    />}\n                </Comment.Group>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(TrainingDetailedChat);\n","import React, { useContext, useEffect } from 'react';\r\nimport { Button, Card, Image, Label, Grid, GridColumn } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport Loading from '../../app/layout/Loading';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport TrainingDetailInfo from './trainingItem/trainingDetailInfo';\r\nimport TrainingDetailSideBar from './trainingItem/trainingDetailSideBar';\r\nimport TrainingDetailedChat from './trainingItem/TrainingDetailedChat';\r\n\r\n\r\ninterface DetailsParams {\r\n    id: string;\r\n}\r\nconst TrainingDetails: React.FC<RouteComponentProps<DetailsParams>> = ({ match, history }) => {\r\n\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { training, loadTraining, loading, deleteTraining, refundTraining, buyTraining, loadingBuy } = baseRepository.trainingsRepository;\r\n\r\n    useEffect(() => {\r\n        loadTraining(match.params.id);\r\n    }, [loadTraining, match.params.id, history])\r\n\r\n    if (loading) return <Loading content={\"Loading Training..\"} />\r\n    if (!training) {\r\n        return <h1>srf</h1>\r\n    }\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <Card fluid>\r\n                    <Image size=\"tiny\" src={`/assets/${training.title}.jpg`} ui={false} />\r\n                    <Card.Content>\r\n                        <Card.Header>\r\n                            {training?.title}\r\n                            <Label.Group tag>\r\n                                <Label as='a'>€{training?.price}</Label>\r\n                            </Label.Group>\r\n                        </Card.Header>\r\n                        <Card.Meta>\r\n                            <span className='date'>{format(training.dateOfCreation, 'do MMMM YYYY')}</span>\r\n                        </Card.Meta>\r\n                        <Card.Description>\r\n                            {training?.description}\r\n                        </Card.Description>\r\n                    </Card.Content>\r\n                    {training.isOwner ?\r\n                        (\r\n                            <Card.Content extra>\r\n                                <Button as={Link} to={`/manage/${training.trainingId}`} /*onClick={() => trainingStore.editMode = true}*/ color='green'>Edit</Button>\r\n                                <Button /*onClick={() => deleteTraining(training?.trainingId)}*/ color='red'>Delete</Button>\r\n                                <Button onClick={() => history.push('/trainings')} > Cancel</Button>\r\n                            </Card.Content>) :\r\n                        training.isBuyer ? (\r\n                            <Card.Content extra>\r\n                                <Button as={Link} to={`/share/${training.trainingId}`} color='green'>Share</Button>\r\n                                <Button as={Link} to={`/favorite/${training.trainingId}`} color='red'>favorites</Button>\r\n                                <Button loading={loadingBuy} onClick={refundTraining} > Refund</Button>\r\n                            </Card.Content>) :\r\n                            (\r\n                                <Card.Content extra>\r\n                                    <Button loading={loadingBuy} onClick={buyTraining} color='green'>Purchase now</Button>\r\n                                    <Button as={Link} to={`/basket/${training.trainingId}`} color='teal'>Put to basket</Button>\r\n                                    <Button onClick={() => history.push('/trainings')} > Cancel</Button>\r\n                                </Card.Content>\r\n                            )\r\n                    }\r\n                </Card>\r\n                <TrainingDetailInfo training={training} />\r\n                <TrainingDetailedChat />\r\n            </GridColumn>\r\n            <GridColumn width={6}>\r\n                <TrainingDetailSideBar buyers={training.buyers!} />\r\n            </GridColumn>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingDetails);","import React from 'react';\r\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\r\nimport { IProfile } from '../../app/models/IPorfile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    profile: IProfile,\r\n    isCurrentUser: boolean,\r\n    loading: boolean,\r\n    follow: (username: string) => void;\r\n    unfollow: (username: string) => void;\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nconst ProfileHeader: React.FC<IProps> = ({ profile, follow, unfollow, loading, isCurrentUser, isLoggedIn }) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image\r\n                                avatar\r\n                                size='small'\r\n                                src={profile.image! || '/assets/user.jpg'}\r\n                            />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'>{profile.displayName}</Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingsCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    {!isCurrentUser && isLoggedIn &&\r\n                        <Reveal animated='move'>\r\n                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                <Button\r\n                                    fluid\r\n                                    color='teal'\r\n                                    content={profile.following ? 'Following' : 'Not following'}\r\n                                />\r\n                            </Reveal.Content>\r\n                            <Reveal.Content hidden>\r\n                                <Button\r\n                                    loading={loading}\r\n                                    fluid\r\n                                    basic\r\n                                    color={profile.following ? 'red' : 'green'}\r\n                                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                                    onClick={\r\n                                        profile.following\r\n                                            ? () => unfollow(profile.username)\r\n                                            : () => follow(profile.username)\r\n                                    }\r\n                                />\r\n                            </Reveal.Content>\r\n                        </Reveal>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n    border: 'dashed 3px',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\n    borderColor: 'green'\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(\r\n            acceptedFiles.map((file: object) =>\r\n                Object.assign(file, {\r\n                    preview: URL.createObjectURL(file)\r\n                })\r\n            )\r\n        );\r\n    }, [setFiles]);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n    return (\r\n        <div\r\n            {...getRootProps()}\r\n            style={\r\n                isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\r\n            }\r\n        >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React, { useRef } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface IProps {\r\n    setImage: (file: Blob) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\r\n    const cropper = useRef<Cropper>(null);\r\n\r\n    const cropImage = () => {\r\n        if (\r\n            cropper.current &&\r\n            typeof cropper.current.getCroppedCanvas() === 'undefined'\r\n        ) {\r\n            return;\r\n        }\r\n        cropper &&\r\n            cropper.current &&\r\n            cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n                setImage(blob);\r\n            }, 'image/jpeg');\r\n    };\r\n\r\n    return (\r\n        <Cropper\r\n            ref={cropper}\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            // Cropper.js options\r\n            aspectRatio={1 / 1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop={cropImage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetCropper;\r\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { Header, Grid, Button } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface IProps {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n    const [files, setFiles] = useState<any[]>([]);\n    const [image, setImage] = useState<Blob | null>(null);\n\n    useEffect(() => {\n        return () => {\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        };\n    });\n\n    return (\n        <Fragment>\n            <Grid>\n                <Grid.Column width={4}>\n                    <Header color='teal' sub content='Step 1 - Add Photo' />\n                    <PhotoWidgetDropzone setFiles={setFiles} />\n                </Grid.Column>\n                <Grid.Column width={1} />\n                <Grid.Column width={4}>\n                    <Header sub color='teal' content='Step 2 - Resize image' />\n                    {files.length > 0 &&\n                        <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview} />\n                    }\n                </Grid.Column>\n                <Grid.Column width={1} />\n                <Grid.Column width={4}>\n                    <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                    {files.length > 0 &&\n                        <Fragment>\n                            <div className='img-preview' style={{ minHeight: '200px', overflow: 'hidden' }} />\n                            <Button.Group widths={2}>\n                            <Button positive icon='check' loading={loading} onClick={() => uploadPhoto(image!)} />\n                            <Button negative icon='close' disabled={loading} onClick={() => setFiles([])} />\n                            </Button.Group>\n                        </Fragment>\n                    }\n                </Grid.Column>\n            </Grid>\n        </Fragment>\n    );\n};\n\nexport default observer(PhotoUploadWidget);\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ProfilePhotos = () => {\r\n    const baseRepo = useContext(BaseRepositoryContext)\r\n    const { profile, isCurrentUser, uploadPhoto, uploadingPhoto, setMainPhoto, deletePhoto, loading } = baseRepo.profileRepository;\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState<string | undefined>(undefined);\r\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\r\n    const handleUploadImage = (photo: Blob) => {\r\n        uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget\r\n                            uploadPhoto={handleUploadImage}\r\n                            loading={uploadingPhoto}\r\n                        />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile &&\r\n                                    profile.photos.map(photo => (\r\n                                        <Card key={photo.id}>\r\n                                            <Image src={photo.url} />\r\n                                            {isCurrentUser && (\r\n                                                <Button.Group fluid widths={2}>\r\n                                                    <Button\r\n                                                        onClick={e => {\r\n                                                            setMainPhoto(photo);\r\n                                                            setTarget(e.currentTarget.name);\r\n                                                        }}\r\n                                                        name={photo.id}\r\n                                                        disabled={photo.isMain}\r\n                                                        loading={loading && target === photo.id}\r\n                                                        basic\r\n                                                        positive\r\n                                                        content='Main'\r\n                                                    />\r\n                                                    <Button\r\n                                                        name={photo.id}\r\n                                                        disabled={photo.isMain}\r\n                                                        onClick={(e) => {\r\n                                                            deletePhoto(photo);\r\n                                                            setDeleteTarget(e.currentTarget.name)\r\n                                                        }}\r\n                                                        loading={loading && deleteTarget === photo.id}\r\n                                                        basic\r\n                                                        negative\r\n                                                        icon='trash'\r\n                                                    />\r\n                                                </Button.Group>\r\n                                            )}\r\n                                        </Card>\r\n                                    ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import React from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, } from 'semantic-ui-react';\r\nimport TextInput from '../form/inputText';\r\nimport InputTextArea from '../form/inputTextArea';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { IProfile } from '../../models/IPorfile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst validate = combineValidators({\r\n    displayName: isRequired('displayName'),\r\n})\r\n\r\ninterface IProps {\r\n    editProfile: (profile: Partial<IProfile>) => void;\r\n    profile: IProfile;\r\n}\r\n\r\nconst ProfileEditForm: React.FC<IProps> = ({ editProfile, profile }) => {\r\n    return (\r\n        <FinalForm\r\n            onSubmit={editProfile}\r\n            validate={validate}\r\n            initialValues={profile!}\r\n            render={({ handleSubmit, invalid, pristine, submitting }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Field\r\n                        name='displayName'\r\n                        component={TextInput}\r\n                        placeholder='Display Name'\r\n                        value={profile!.displayName}\r\n                    />\r\n                    <Field\r\n                        name='bio'\r\n                        component={InputTextArea}\r\n                        rows={3}\r\n                        placeholder='Bio'\r\n                        value={profile!.bio}\r\n                    />\r\n                    <Button\r\n                        loading={submitting}\r\n                        floated='right'\r\n                        disabled={invalid || pristine}\r\n                        positive\r\n                        content='Update profile'\r\n                    />\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEditForm);\r\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Header, List, Button, Grid } from 'semantic-ui-react';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ProfileEditForm from '../../app/common/EditProfile/ProfileEditForm';\r\n\r\nconst ProfileDescription = () => {\r\n    const baseRepo = useContext(BaseRepositoryContext);\r\n    const { isCurrentUser, profile, editProfile } = baseRepo.profileRepository;\r\n    const [editProfileMode, setEditProfileMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n                    <Header floated='left' icon='address card' content={`About ${profile!.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setEditProfileMode(!editProfileMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={editProfileMode ? 'Cancel' : 'Edit Profile'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editProfileMode ? (\r\n                        <ProfileEditForm editProfile={editProfile} profile={profile!} />\r\n                    ) : (\r\n                            <List>\r\n                                <List.Item>\r\n                                    <List.Icon name='marker' />\r\n                                    <List.Content>{profile!.bio}</List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List.Icon name='mail' />\r\n                                    <List.Content>{profile!.email}</List.Content>\r\n                                </List.Item>\r\n                            </List>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileDescription);","import React from 'react';\r\nimport { Card, Image, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IProfile } from '../../app/models/IPorfile';\r\ninterface IProps {\r\n    following: IProfile;\r\n}\r\nconst ProfileCard: React.FC<IProps> = ({ following }) => {\r\n    return (\r\n        <Card as={Link} to={`/profile/${following.username}`}>\r\n            <Image src={following.image || '/assets/user.jpg'} />\r\n            <Card.Content>\r\n                <Card.Header>{following.displayName}</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <div>\r\n                    <Icon name='user' />\r\n                    {following.followersCount} followers\r\n                </div>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ProfileCard;","import React, { useContext } from 'react';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const { profile, followings, loading, activeTab } = baseRepo.profileRepository;\n\n    return (\n        <Tab.Pane loading={loading}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={\n                            activeTab === 3\n                                ? `People following ${profile!.displayName}`\n                                : `People ${profile!.displayName} is following`\n                        }\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={5}>\n                        {followings.map((following) => (\n                            <ProfileCard key={following.username} following={following} />\n                        ))}\n\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default ProfileFollowings;","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\nimport { IUserTraining } from '../../app/models/IPorfile';\r\n\nconst panes = [\n    { menuItem: 'Owining', pane: { key: 'owned' } }\n];\nconst loggedPanes = [\n    { menuItem: 'Owining', pane: { key: 'owned' } },\n    { menuItem: 'Past Courses', pane: { key: 'pastCourses' } },\n    { menuItem: 'Future Courses', pane: { key: 'futureCourses' } }\n];\nconst ProfileEvents = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const {\n        loadUserTrainings,\n        profile,\n        loadingTraining,\n        userTrainings\n    } = baseRepo.profileRepository!;\n    const { isLoggedIn } = baseRepo.userRepository;\r\n\n    useEffect(() => {\n        loadUserTrainings(profile!.username, 'owning');\n    }, [loadUserTrainings, profile]);\n\n    const handleTabChange = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n        data: TabProps\n    ) => {\n        let predicate;\n        switch (data.activeIndex) {\n            case 1:\n                predicate = 'past';\n                break;\n            case 2:\n                predicate = 'future';\n                break;\n            default:\n                predicate = 'owning';\n                break;\n        }\n        loadUserTrainings(profile!.username, predicate);\n    };\n\n    return (\n        <Tab.Pane loading={loadingTraining}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='book' content={'Trainings'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={isLoggedIn ? loggedPanes : panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userTrainings.map((training: IUserTraining) => (\n                            <Card\n                                as={Link}\n                                to={`/training/${training.id}`}\n                                key={training.id}\n                            >\n                                <Image\n                                    src={`/assets/${training.title}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{training.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(training.date), 'do LLL')}</div>\n                                        <div>{format(new Date(training.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileEvents);","import React from 'react'\r\nimport { Tab } from 'semantic-ui-react';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileDescription from './ProfileDescription';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfileTrainings from './ProfileTrainings';\r\n\r\nconst panes = [\r\n    { menuItem: 'About', render: () => <ProfileDescription /> },\r\n    { menuItem: 'Photos', render: () => < ProfilePhotos />},\r\n    {\r\n        menuItem: 'Trainings', render: () => <ProfileTrainings/> },\r\n    { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n    { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n]\r\n\r\ninterface IProps {\r\n    setActiveTab: (activeIndex: any) => void;\r\n}\r\n\r\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProfileContent\r\n","import React, { useContext, useEffect } from 'react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport Loading from '../../app/layout/Loading';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface RouteParams {\r\n    username: string\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> { }\r\n\r\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\r\n    const baseRepo = useContext(BaseRepositoryContext);\r\n    const { loadProfile, profile, loadingProfile, follow, unfollow, isCurrentUser, loading, setActiveTab } = baseRepo.profileRepository;\r\n    const { isLoggedIn } = baseRepo.userRepository;\r\n\r\n    useEffect(() => {\r\n        loadProfile(match.params.username);\r\n    }, [loadProfile, match])\r\n    if (loadingProfile) return <Loading content=\"Loading Profile ...\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader\r\n                    profile={profile!}\r\n                    follow={follow}\r\n                    unfollow={unfollow}\r\n                    isCurrentUser={isCurrentUser}\r\n                    loading={loading}\r\n                    isLoggedIn={isLoggedIn}\r\n                />\r\n                <ProfileContent setActiveTab={setActiveTab}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport default observer(ProfilePage);","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Header, Segment, Icon } from 'semantic-ui-react';\r\nimport agent from '../../app/agent/agent';\r\nimport { toast } from 'react-toastify';\r\nimport queryString from 'query-string';\r\n\r\nconst RegisterSuccess: React.FC<RouteComponentProps> = ({ location }) => {\r\n    const { email } = queryString.parse(location.search);\r\n    const resensendEmailHandler = () => {\r\n        agent.userAgent.resendEmailConfirm(email as string).then(() => {\r\n            toast.success('please check you email');\r\n        }).catch((e) => console.log(e));\r\n    }\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"check\" />\r\n                Successfully registred\r\n            </Header>\r\n            <Segment.Inline>\r\n                <div className=\"centre\">\r\n                    <p>\r\n                        Please check your email (including your junk folder) for the verification email\r\n                    </p>\r\n                    {email &&\r\n                        <>\r\n                            <p>Didn't receive the mail please click the button below to resend </p>\r\n                            <Button onClick={resensendEmailHandler}\r\n                                primary\r\n                                content=\"Resend email\"\r\n                                size=\"huge\"\r\n                            />\r\n                        </>\r\n                    }\r\n                </div>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default RegisterSuccess;","import React, { useContext, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Header, Segment, Icon } from 'semantic-ui-react';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { toast } from 'react-toastify';\r\nimport queryString from 'query-string';\r\nimport agent from '../../app/agent/agent';\r\nimport LoginForm from './LoginForm';\r\n\r\nconst VerifyEmail: React.FC<RouteComponentProps> = ({ location }) => {\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const Status = {\r\n        Verifying: \"Verifying\",\r\n        Failed: \"Failed\",\r\n        Success: \"Success\"\r\n    }\r\n\r\n    const resensendEmailHandler = () => {\r\n        agent.userAgent.resendEmailConfirm(email as string).then(() => {\r\n            toast.success('please check you email');\r\n        }).catch((e) => console.log(e));\r\n    }\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n    const { openModal } = baseRepository.modalRepository;\r\n    const { token, email } = queryString.parse(location.search);\r\n\r\n    useEffect(() => {\r\n        agent.userAgent.verifyEmail(token as string, email as string).then(() => setStatus(Status.Success))\r\n            .catch(() => setStatus(Status.Failed));\r\n    }, [Status.Failed, Status.Success, token, email]);\r\n\r\n    const getBody = () => {\r\n        switch (status) {\r\n            case (Status.Verifying):\r\n                return (\r\n                    <p>\r\n                    Verifying ...\r\n                </p>);\r\n            case (Status.Failed):\r\n                return (\r\n                    <div className=\"center\">Verifying ...\r\n                        <p>Verifying fieled you can try resending email</p>\r\n                        <Button\r\n                            onClick={resensendEmailHandler}\r\n                            primary\r\n                            content=\"Resend email\"\r\n                            size=\"huge\"\r\n                        />\r\n                    </div>\r\n                );\r\n            case (Status.Success):\r\n                return (\r\n                    <div className=\"center\">Verifying ...\r\n                        <p>Verifying fieled you can try resending email</p>\r\n                        <Button onClick={() => openModal(<LoginForm />)}\r\n                            primary\r\n                            content=\"Login\"\r\n                            size=\"large\"\r\n                        />\r\n                    </div>\r\n                );\r\n        }\r\n    };\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"envelope\" />\r\n               Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default VerifyEmail;","import React from 'react';\r\nimport { Segment, Header, Icon, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon >\r\n                <Icon name=\"search\" />\r\n                Oops hahaha\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to=\"/trainings/\" primary>\r\n                    Return to Trainings Page...\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React, { useContext } from 'react';\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { BaseRepositoryContext } from '../../repositories/baseRepository';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ModalContainer = () => {\r\n    const baseRepo = useContext(BaseRepositoryContext);\r\n    const { closeModal, modal: { open, body } } = baseRepo.modalRepository;\r\n    return (\r\n        <Modal open={open} onClose={closeModal} size='mini'>\r\n            <Modal.Content>{body}</Modal.Content>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default observer(ModalContainer);","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react'\r\nimport NavBar from '../../features/Nav/navBar';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Route, RouteComponentProps, withRouter, Switch } from 'react-router-dom';\r\nimport TrainingDashboard from '../../features/Training/defaultDashboard';\r\nimport TrainingEdit from '../../features/Training/form';\r\nimport TrainingDetails from '../../features/Training/detail';\r\nimport ProfilePage from '../../features/Profile/ProfilePage';\r\nimport RegisterSuccess from '../../features/User/RegisterSuccess';\r\nimport VerifyEmail from '../../features/User/VerifyEmail';\r\nimport NotFound from './NoFound';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { BaseRepositoryContext } from '../repositories/baseRepository';\r\nimport Loading from './Loading';\r\nimport ModalContainer from '../common/modal/ModalContainer';\r\n\r\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { token, setAppLoaded, appLoaded } = baseRepository.commonRepository;\r\n    const { getUser } = baseRepository.userRepository;\r\n\r\n    useEffect(() => {\r\n        if (token && !appLoaded) {\r\n            getUser().finally(() => setAppLoaded())\r\n        }\r\n        else {\r\n            setAppLoaded();\r\n        }\r\n    }, [getUser, appLoaded, token, setAppLoaded])\r\n    if (!appLoaded) return <Loading content='Loading app ...' />\r\n    return (\r\n        <div>\r\n            <ModalContainer />\r\n            <Fragment>\r\n                <ToastContainer position='bottom-right' />\r\n                <NavBar />\r\n                <Container style={{ marginTop: '3em' }}>\r\n                    <Switch>\r\n                        <Route exact path='/' component={TrainingDashboard} />\r\n                        <Route exact path='/trainings' component={TrainingDashboard} />\r\n                        <Route key={location.key} exact path={['/createTraining', '/manage/:id']} component={TrainingEdit} />\r\n                        <Route path='/detailTraining/:id' component={TrainingDetails} />\r\n                        <Route path='/profile/:username' component={ProfilePage} />\r\n                        <Route path='/user/RegisterSuccess' component={RegisterSuccess} />\r\n                        <Route path='/user/VerifyEmail' component={VerifyEmail} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </Container>\r\n            </Fragment>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(observer(App));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return children;\r\n};\r\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport { createBrowserHistory } from 'history';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport * as serviceWorker from './serviceWorker';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\nimport ScrollToTop  from './app/layout/ScrollToTop'\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history} >\n        <ScrollToTop>\n            <App />\n        </ScrollToTop>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}