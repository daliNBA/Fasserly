{"version":3,"sources":["app/common/options/ITOptions.tsx","app/agent/agent.ts","app/common/util/util.ts","app/repositories/trainingRepository.ts","app/repositories/userRepository.ts","app/repositories/commonRepository.ts","app/repositories/modalRepository.ts","app/repositories/profileRepository.ts","app/repositories/baseRepository.ts","app/common/form/inputText.tsx","app/common/form/ErrorMessage.tsx","features/User/LoginForm.tsx","features/User/RegisterForm.tsx","features/Nav/navBar.tsx","features/Training/TrainingListItemBuyers.tsx","features/Training/trainingItem.tsx","features/Training/trainingList.tsx","features/Training/dashboard/TrainingFilters.tsx","features/Training/dashboard/TrainingItemPlaceholder.tsx","features/Training/defaultDashboard.tsx","app/models/ITraining.ts","app/common/form/inputTextArea.tsx","app/common/form/inputSelect.tsx","app/common/form/inputDate.tsx","features/Training/form.tsx","app/layout/Loading.tsx","features/Training/trainingItem/trainingDetailInfo.tsx","features/Training/trainingItem/trainingDetailSideBar.tsx","features/Training/trainingItem/TrainingDetailedChat.tsx","features/Training/detail.tsx","features/Profile/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/Profile/ProfilePhotos.tsx","app/common/EditProfile/ProfileEditForm.tsx","features/Profile/ProfileDescription.tsx","features/Profile/ProfileCard.tsx","features/Profile/ProfileFollowings.tsx","features/Profile/ProfileTrainings.tsx","features/Profile/ProfileContent.tsx","features/Profile/ProfilePage.tsx","app/layout/NoFound.tsx","app/common/modal/ModalContainer.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["ITList","key","text","value","axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","messagge","toast","data","status","history","push","startsWith","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","training","update","trainingId","buy","refund","current","login","user","register","username","uploadPhoto","photo","setMainPhoto","deletePhoto","editProfile","profile","follow","unfollow","listFollowings","predicate","listTrainings","setTrainingProps","isLogged","dateOfCreation","Date","isBuyer","buyers","some","a","isOwner","b","soldTraining","displayName","image","TrainingRepository","observable","ref","baseRepository","_baseRepository","this","reaction","keys","page","trainingRegestry","clear","loadTrainings","trainings","sortedTrainings","sort","getDate","Object","entries","reduce","date","toISOString","split","URLSearchParams","String","forEach","sortByDate","Array","from","values","Math","ceil","trainingCount","Map","action","set","computed","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonRepository","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","message","stop","err","userRepository","isLoggedIn","loading","agent","axiosParams","trainingsEnvelope","submitting","buyer","event","target","currentTarget","name","getTraining","loadingBuy","filter","UserRepository","setToken","modalRepository","closeModal","trainingsRepository","setItem","appLoaded","ModalRepository","shallow","open","content","modal","ProfileRepository","activeTab","loadFollowings","followings","activeIndex","loadingTraining","userTraining","userTrainings","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","followingsCount","profiles","configure","enforceActions","BaseRepositoryContext","createContext","profileRepository","CommonRepository","TextInput","input","width","type","placeholder","meta","touched","Form","Field","Label","basic","color","ErrorMessage","Message","Header","statusText","length","List","flat","map","i","Item","Content","validate","combineValidators","email","isRequired","password","LoginFrom","useContext","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","as","textAlign","component","Button","disabled","fluid","RegisterFrom","observer","baseReposiitory","logout","openModal","Menu","pointing","NavLink","exact","to","src","alt","height","Dropdown","item","simple","direction","options","Input","icon","position","animated","margin","hidden","visible","Icon","Image","avatar","spaced","Link","onClick","RegisterForm","styles","borderColor","borderWidth","TrainingListItemBuyers","horizontal","Popup","header","trigger","size","circular","bordered","style","trainingImageStyle","filtre","marginBottom","TrainingItem","owner","x","buyTraining","Segment","Group","title","Description","Rating","maxRating","defaultRating","format","description","secondary","clearing","attached","trainingByDate","divided","group","setPredicate","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","GridColumn","TrainingItemPlaceholder","pageStart","loadMore","hasMore","initialLoad","Column","Loader","TrainingFormValues","init","language","price","rating","now","updateDate","isActive","category","assign","InputTextArea","rows","InputSelect","Select","e","InputDate","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","loadTraining","createTraining","editTraining","setTraining","setLoading","finally","initialValues","dateAndTime","year","getFullYear","month","getMonth","day","stringDate","combineTimeAndDate","time","newTraining","uuid","floated","Or","positive","Loading","inverted","Dimmer","TrainingDetailInfo","SegmentGroup","verticalAlign","border","relaxed","ribbon","Extra","baseRepo","createHubConnection","stopHubConnection","addcomment","Comment","dateOfComment","Avatar","Author","diplayName","Metadata","formatDistance","Text","form","reset","labelPosition","primary","refundTraining","deleteTraining","Card","ui","tag","Meta","className","extra","isCurrentUser","Statistic","widths","label","Divider","Reveal","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","overflow","negative","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","itemsPerRow","bio","editProfileMode","setEditProfileMode","ProfileCard","ProfileFollowings","panes","menuItem","pane","loggedPanes","loadUserTrainings","menu","onTabChange","handleTabChange","objectFit","ProfileTrainings","ProfileContent","setActiveTab","menuPosition","loadProfile","NotFound","Inline","Modal","onClose","withRouter","location","setAppLoaded","getUser","Container","path","TrainingDashboard","TrainingEdit","TrainingDetails","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35bd8f9a.chunk.js","sourcesContent":["export const ITList = [\r\n    { key: 'All', text: 'All development', value: '0.0' },\r\n    { key: 'Web', text: 'Web', value: 'Web' },\r\n    { key: 'Game', text: 'Game', value: 'Game' },\r\n    { key: 'Mobil', text: 'Mobil', value: 'Mobil' },\r\n    { key: 'WebC', text: 'Conception Web', value: 'WebC' },\r\n    { key: 'Graphic', text: 'Graphic Conception', value: 'Graphic' },\r\n    { key: 'Animation', text: 'Animation', value: 'Animation' },\r\n    { key: '3D', text: '3D', value: '3D' },\r\n    { key: 'Finance', text: 'Finance', value: 'Finance' },\r\n    { key: 'Entrepreneurship', text: 'Entrepreneurship', value: 'Entrepreneurship' },\r\n    { key: 'Gestion', text: 'Gestion', value: 'Gestion' }\r\n];","import { ITraining, ITrainingEnvelope } from '../models/ITraining';\r\nimport { IProfile, IPhoto, IUserTraining } from '../models/IPorfile';\r\nimport { IUser, IUserFromValues } from '../models/IUser';\r\nimport axios, { AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n//we can found this modifcations in (inspector => Network => request => header)\r\naxios.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error)\r\n})\r\n\r\naxios.interceptors.response.use(undefined, (error) => {\r\n    if (error.messagge === 'Network Error' && !error.response)\r\n        toast.error('Network error - make sure API is running!')\r\n    const { data, status, config, headers } = error.response;\r\n    if (!error.response)\r\n        toast.error(\"Network error - Please check your connection \");\r\n    if (status === 404)\r\n        history.push('/notfound');\r\n    if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n        window.localStorage.removeItem('jwt');\r\n        history.push('/');\r\n        toast.info(\"Your session is expired, please login again\");\r\n    }\r\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id'))\r\n        history.push('/notfound');\r\n    if (status === 500)\r\n        toast.error(\"server error - check the terminal for more info!\");\r\n    throw error.response;\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms))\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    delete: (url: string) => axios.delete(url).then(responseBody),\r\n    postForm: (url: string, file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post(url, formData, {\r\n            headers: { 'content-type': 'multipart/form-data' }\r\n        }).then(responseBody)\r\n    }\r\n};\r\n//(Communication bteween controller and Client-app)\r\n//training Agent \r\nconst trainingAgent = {\r\n    list: (params: URLSearchParams): Promise<ITrainingEnvelope> =>\r\n        axios.get('/training', { params: params }).then(responseBody),\r\n    details: (id: string) => requests.get(`/training/${id}`),\r\n    create: (training: ITraining) => requests.post('/training', training),\r\n    update: (training: ITraining) => requests.put(`/training/${training.trainingId}`, training),\r\n    delete: (id: string | undefined) => requests.delete(`/training/${id}`),\r\n    buy: (id: string | undefined) => requests.post(`/training/${id}/buy`, {}),\r\n    refund: (id: string | undefined) => requests.delete(`/training/${id}/buy`),\r\n}\r\n\r\n//Profile agent\r\nconst profileAgent = {\r\n    get: (username: string): Promise<IProfile> => requests.get(`/profile/${username}`),\r\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photo`, photo),\r\n    setMainPhoto: (id: string) => requests.post(`/photo/${id}/setmain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photo/${id}`),\r\n    editProfile: (profile: Partial<IProfile>) => requests.put(`/profile`, profile),\r\n    follow: (username: string) => requests.post(`/profile/${username}/follow`, {}),\r\n    unfollow: (username: string) => requests.delete(`/profile/${username}/follow`),\r\n    listFollowings: (username: string, predicate: string) => requests.get(`/profile/${username}/follow?predicate=${predicate}`),\r\n    listTrainings: (username: string, predicate: string) => requests.get(`/profile/${username}/trainings?predicate=${predicate}`),\r\n}\r\n//User Agent\r\nconst userAgent = {\r\n    current: (): Promise<IUser> => requests.get('/user'),\r\n    login: (user: IUserFromValues): Promise<IUser> => requests.post(`/user/login`, user),\r\n    register: (user: IUserFromValues): Promise<IUser> => requests.post(`/user/register`, user),\r\n}\r\nexport default {\r\n    trainingAgent,\r\n    userAgent,\r\n    profileAgent\r\n}","import { ITraining, IBuyer } from \"../../models/ITraining\";\r\nimport { IUser } from \"../../models/IUser\";\r\n\r\nexport const combineTimeAndDate = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const stringDate = `${year}-${month}-${day}`;\r\n    return new Date(stringDate);\r\n}\r\n\r\nexport const setTrainingProps = (training: ITraining, user: IUser, isLogged: boolean) =>\r\n{\r\n    training.dateOfCreation = new Date(training.dateOfCreation);\r\n    if (isLogged) {\r\n        training.isBuyer = training.buyers!.some(\r\n            a => a.username === user.username\r\n        )\r\n        training.isOwner = training.buyers!.some(\r\n            b => b.username === user.username && b.isOwner\r\n        )\r\n    }\r\n    return training;\r\n}\r\n\r\nexport const soldTraining = (user: IUser): IBuyer => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isOwner: false,\r\n        username: user.username,\r\n        image: user.image!,\r\n    }\r\n}\r\n","import { observable, action, computed, runInAction, reaction } from 'mobx'\r\nimport agent from '../agent/agent';\r\nimport { ITraining } from '../models/ITraining';\r\nimport { history } from '../../index';\r\nimport { toast } from 'react-toastify';\r\nimport { BaseRepository } from './baseRepository'\r\nimport { setTrainingProps, soldTraining } from '../common/util/util';\r\nimport { SyntheticEvent } from 'react';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport default class TrainingRepository {\r\n\r\n    _baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this._baseRepository = baseRepository;\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.page = 0;\r\n                this.trainingRegestry.clear();\r\n                this.loadTrainings();\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    @observable training: ITraining | null = null;\r\n    @observable loading = false;\r\n    @observable submitting = false;\r\n    @observable trainingRegestry = new Map();\r\n    @observable target = '';\r\n    @observable loadingBuy = false;\r\n    //the hole class will be observe it (Hub connexion SignalR)\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n    @observable trainingCount = 0;\r\n    @observable page = 0\r\n    @observable predicate = new Map();\r\n\r\n    @action setPredicate = (predicate: string, value: string | Date) => {\r\n        this.predicate.clear();\r\n        if (predicate !== 'all') {\r\n            this.predicate.set(predicate, value);\r\n        }\r\n    }\r\n\r\n    @computed get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('limit', String(LIMIT));\r\n        params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, value.toISOString())\r\n            } else {\r\n                params.append(key, value)\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    @computed get trainingByDate() {\r\n        return this.sortByDate(Array.from(this.trainingRegestry.values()));\r\n    }\r\n\r\n    @computed get totalPages() {\r\n        return Math.ceil(this.trainingCount / LIMIT);\r\n    }\r\n    @action setPage = (page: number) => {\r\n        this.page = page;\r\n    }\r\n\r\n    //Hub for Signal token connection\r\n    @action createHubConnection = (trainingId: string) => {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            //this url must have the same url of server\r\n            .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n                accessTokenFactory: () => this._baseRepository.commonRepository.token!\r\n            })\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n        this.hubConnection.start()\r\n            .then(() => console.log(this.hubConnection!.state))\r\n            .then(() => {\r\n                console.log(\"Attempting to join group\");\r\n                //have to much to same name of methode chatHub\r\n                this.hubConnection!.invoke('AddToGroup', trainingId);\r\n            })\r\n            .catch(error => console.log('Error estabilshed connection', error));\r\n        //this must match the same of ReceiveComment in chatHub\r\n        this.hubConnection.on('ReceiveComment', comment => {\r\n            runInAction(() => {\r\n                this.training!.comments.push(comment);\r\n            })\r\n        })\r\n        this.hubConnection.on('Send', message => {\r\n            toast.info(message);\r\n        })\r\n    }\r\n\r\n    @action stopHubConnection = () => {\r\n        this.hubConnection!.invoke('RemoveFromGroup', this.training?.trainingId)\r\n            .then(() => {\r\n                this.hubConnection?.stop()\r\n            }).then(() => console.log('Connection stopped'))\r\n            .catch(err => console.log(err));\r\n        this.hubConnection!.stop();\r\n    }\r\n\r\n    @action addcomment = async (values: any) => {\r\n        values.trainingId = this.training?.trainingId;\r\n        try {\r\n            //SendComment must have the same name of methode in hubChat\r\n            await this.hubConnection!.invoke('SendComment', values)\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    sortByDate(trainings: ITraining[]) {\r\n        const sortedTrainings = trainings.sort((a, b) => a.dateOfCreation!.getDate() - b.dateOfCreation!.getDate());\r\n        return Object.entries(sortedTrainings.reduce((trainings, training) => {\r\n            const date = training.dateOfCreation!.toISOString().split('T')[0];\r\n            trainings[date] = trainings[date] ? [...trainings[date], training] : [training];\r\n            return trainings;\r\n        }, {} as { [key: string]: ITraining[] }));\r\n    }\r\n\r\n    @action loadTrainings = async () => {\r\n        const isLogged = this._baseRepository.userRepository.isLoggedIn;\r\n        this.loading = true;\r\n        try {\r\n            const trainingsEnvelope = await agent.trainingAgent.list(this.axiosParams)\r\n            const { trainings, trainingCount } = trainingsEnvelope;\r\n            runInAction('Loading', () => {\r\n                trainings.forEach((training) => {\r\n                    setTrainingProps(training, this._baseRepository.userRepository.user!, isLogged);\r\n                    this.trainingRegestry.set(training.trainingId, training);\r\n                    console.log(training.buyers);\r\n                });\r\n                this.trainingCount = trainingCount;\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction('loading Error', () => {\r\n                console.log(error);\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action createTraining = async (training: ITraining) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.trainingAgent.create(training);\r\n            const buyer = soldTraining(this._baseRepository.userRepository.user!);\r\n            buyer.isOwner = true;\r\n            let buyers = [];\r\n            buyers.push(buyer);\r\n            training.buyers = buyers;\r\n            training.isOwner = true;\r\n            training.comments = [];\r\n            runInAction('Creating training', () => {\r\n                this.trainingRegestry.set(training.trainingId, training);\r\n                this.training = training;\r\n                this.submitting = false;\r\n            })\r\n            history.push(`/detailTraining/${training.trainingId}`);\r\n        } catch (error) {\r\n            runInAction('Creating training Error', () => {\r\n                this.submitting = false;\r\n                console.log(error);\r\n            })\r\n            toast.error(\"Error submitting Data\");\r\n        }\r\n    }\r\n\r\n    @action editTraining = async (training: ITraining) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.trainingAgent.update(training);\r\n            runInAction('editnig', () => {\r\n                this.trainingRegestry.set(training.trainingId, training);\r\n                this.training = training;\r\n                this.submitting = false;\r\n            })\r\n            history.push(`/detailTraining/${training.trainingId}`);\r\n        }\r\n        catch (error) {\r\n            runInAction('edit Error', () => {\r\n                console.log(error);\r\n                this.submitting = false;\r\n            })\r\n            toast.error(\"Error submitting Data\");\r\n        }\r\n    }\r\n\r\n    @action deleteTraining = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        try {\r\n            await agent.trainingAgent.delete(id)\r\n            runInAction(() => {\r\n                this.trainingRegestry.delete(id);\r\n                this.training = null;\r\n                this.submitting = false;\r\n                this.target = '';\r\n            })\r\n        } catch (e) {\r\n            runInAction(() => {\r\n                console.log(e);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            })\r\n        }\r\n    }\r\n\r\n    @action loadTraining = async (id: string) => {\r\n        const isLogged = this._baseRepository.userRepository.isLoggedIn;\r\n        let training = this.getTraining(id);\r\n        if (training) {\r\n            this.training = training;\r\n            return training;\r\n        } else {\r\n            try {\r\n                this.loading = true;\r\n                training = await agent.trainingAgent.details(id);\r\n                runInAction('Loading', () => {\r\n                    setTrainingProps(training, this._baseRepository.userRepository.user!, isLogged);\r\n                    this.training = training;\r\n                    this.loading = false;\r\n                    console.log(training);\r\n                    return training;\r\n                });\r\n            } catch (e) {\r\n                runInAction('Edit error', () => {\r\n                    console.log(e);\r\n                    this.loading = false;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    @action buyTraining = async () => {\r\n        const buyer = soldTraining(this._baseRepository.userRepository.user!);\r\n        this.loadingBuy = true;\r\n        try {\r\n\r\n            await agent.trainingAgent.buy(this.training!.trainingId);\r\n            runInAction(() => {\r\n                if (this.training) {\r\n                    this.training.buyers!.push(buyer);\r\n                    this.training.isBuyer = true;\r\n                    this.trainingRegestry.set(this.training.trainingId, this.training);\r\n                    this.loadingBuy = false;\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingBuy = false;\r\n            })\r\n            toast.error('Problem buying course')\r\n        }\r\n    }\r\n\r\n    @action refundTraining = async () => {\r\n        this.loadingBuy = true;\r\n        try {\r\n            await agent.trainingAgent.refund(this.training!.trainingId);\r\n            runInAction(() => {\r\n                if (this.training) {\r\n                    this.training.buyers = this.training.buyers!.filter(b => b.username !== this._baseRepository.userRepository.user!.username);\r\n                    this.training.isBuyer = false;\r\n                    this.trainingRegestry.set(this.training.trainingId, this.training);\r\n                    this.loadingBuy = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingBuy = false;\r\n            })\r\n            toast.error('Problem buying course')\r\n        }\r\n    }\r\n\r\n    @action getTraining = (id: string) => {\r\n        return this.trainingRegestry.get(id);\r\n    }\r\n\r\n    @action selectTraining = (id: string) => {\r\n        this.training = this.trainingRegestry.get(id);\r\n    }\r\n    @action clearTraining = () => {\r\n        this.training = null;\r\n    }\r\n}\r\n","import { observable, computed, action, runInAction } from 'mobx';\r\nimport { IUser, IUserFromValues } from '../models/IUser';\r\nimport agent from '../agent/agent';\r\nimport { history } from '../../index';\r\nimport { BaseRepository } from './baseRepository'\r\n\r\nexport default class UserRepository {\r\n\r\n    _baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this._baseRepository = baseRepository;\r\n    }\r\n\r\n    @observable user: IUser | null = null;\r\n\r\n    @computed get isLoggedIn() { return !!this.user }\r\n\r\n    @action login = async (values: IUserFromValues) => {\r\n        try {\r\n            const user = await agent.userAgent.login(values);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            this._baseRepository.commonRepository.setToken(user.token);\r\n            this._baseRepository.modalRepository.closeModal();\r\n            history.push('/trainings');\r\n            this._baseRepository.trainingsRepository.loadTrainings();\r\n            console.log(this.user);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action register = async (values: IUserFromValues) => {\r\n        try {\r\n            const user = await agent.userAgent.register(values);\r\n            this._baseRepository.commonRepository.setToken(user.token);\r\n            this._baseRepository.modalRepository.closeModal();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            this._baseRepository.commonRepository.setToken(user.token);\r\n            history.push('/trainings');\r\n            console.log(this.user);\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action getUser = async () => {\r\n        try {\r\n            const user = await agent.userAgent.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action logout = () => {\r\n        this._baseRepository.commonRepository.setToken(null);\r\n        this.user = null;\r\n        this._baseRepository.trainingsRepository.loadTrainings();\r\n    }\r\n}\r\n","import { BaseRepository } from './baseRepository'\r\nimport { observable, action, reaction } from 'mobx';\r\n\r\nexport default class commonRepository {\r\n\r\n    baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this.baseRepository = baseRepository\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token =>\r\n            {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');;\r\n    @observable appLoaded = false;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { BaseRepository } from './baseRepository'\r\nimport { observable, action } from 'mobx';\r\n\r\nexport default class ModalRepository {\r\n    baseRepository: BaseRepository;\r\n    constructor(baseRepository: BaseRepository) {\r\n        this.baseRepository = baseRepository;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    @action openModal = (content: any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n\r\n    @action closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n","import { BaseRepository } from './baseRepository'\r\nimport { observable, runInAction, action, computed, reaction } from 'mobx';\r\nimport { IProfile, IPhoto, IUserTraining } from '../models/IPorfile';\r\nimport agent from '../agent/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\nexport default class ProfileRepository {\r\n    baseRepository: BaseRepository\r\n    constructor(baseRepository: BaseRepository) {\r\n        this.baseRepository = baseRepository;\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'followings';\r\n                    this.loadFollowings(predicate)\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable profile: IProfile | null = null;\r\n    @observable loadingProfile = true;\r\n    @observable uploadingPhoto = false;\r\n    @observable loading = false;\r\n    @observable followings: IProfile[] = [];\r\n    @observable activeTab: number = 0;\r\n    @observable userTrainings: IUserTraining[] = [];\r\n    @observable loadingTraining = false;\r\n\r\n    @computed get isCurrentUser() {\r\n        if (this.baseRepository.userRepository.user && this.profile)\r\n            return this.baseRepository.userRepository.user.username === this.profile.username;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    @action setActiveTab = (activeIndex: number) => {\r\n        this.activeTab = activeIndex;\r\n    } \r\n\r\n    @action loadUserTrainings = async (username: string, predicate?: string) => {\r\n        this.loadingTraining = true;\r\n        try {\r\n            const userTraining = await agent.profileAgent.listTrainings(username, predicate!);\r\n            runInAction(() => {\r\n                this.userTrainings = userTraining;\r\n                this.loadingTraining = false;\r\n            })\r\n        } catch (e) {\r\n            toast.error(\"Problem Uploading photo!\");\r\n            runInAction(() => {\r\n                this.loadingTraining = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action loadProfile = async (username: string) => {\r\n        try {\r\n            const profile = await agent.profileAgent.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const photo = await agent.profileAgent.uploadPhoto(file);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos.push(photo);\r\n                    if (photo.isMain && this.baseRepository.userRepository.user) {\r\n                        this.baseRepository.userRepository.user.image = photo.url;\r\n                        this.profile.image = photo.url;\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploadingPhoto = false;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Problem Uploading photo!\");\r\n            runInAction(() => {\r\n                this.uploadingPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action setMainPhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.setMainPhoto(photo.id);\r\n            runInAction(() => {\r\n                this.baseRepository.userRepository.user!.image = photo.url;\r\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n                this.profile!.image = photo.url;\r\n                this.loading = false;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Problem setting photo as main!\");\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    };\r\n\r\n    @action deletePhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                this.profile!.photos = this.profile!.photos.filter(a => a.id !== photo.id);\r\n                this.loading = false;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Problem deleting photo!\");\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action editProfile = async (profile: Partial<IProfile>) => {\r\n        try {\r\n            await agent.profileAgent.editProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName !== this.baseRepository.userRepository.user!.displayName) {\r\n                    this.baseRepository.userRepository.user!.displayName = profile.displayName!;\r\n                }\r\n                this.profile = { ...this.profile!, ...profile }\r\n            })\r\n        } catch (e) {\r\n            toast.error(\"Problem updating profile\");\r\n            runInAction(() => {\r\n            })\r\n        }\r\n    }\r\n\r\n    @action follow = async (username: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.follow(username);\r\n            runInAction(() => {\r\n                this.profile!.following = true;\r\n                this.profile!.followersCount++;\r\n                this.loading = false;\r\n                console.log(this.profile!.followingsCount);\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problem following user');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    @action unfollow = async (username: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profileAgent.unfollow(username);\r\n            runInAction(() => {\r\n                this.profile!.following = false;\r\n                this.profile!.followersCount--;\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problem unfollowing user');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    @action loadFollowings = async (predicate: string) => {\r\n        this.loading = true;\r\n        try {\r\n            const profiles = await agent.profileAgent.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = profiles;\r\n                this.loading = false;\r\n            })\r\n        } catch (e) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    };\r\n}\r\n","import TrainingRepository from './trainingRepository';\r\nimport UserRepository from './userRepository';\r\nimport CommonRepository from './commonRepository';\r\nimport ModalRepository from './modalRepository';\r\nimport ProfileRepository from './profileRepository';\r\nimport { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class BaseRepository {\r\n\r\n    trainingsRepository: TrainingRepository;\r\n    userRepository: UserRepository;\r\n    commonRepository: CommonRepository;\r\n    modalRepository: ModalRepository;\r\n    profileRepository: ProfileRepository;\r\n\r\n    constructor() {\r\n        this.trainingsRepository = new TrainingRepository(this);\r\n        this.userRepository = new UserRepository(this);\r\n        this.commonRepository = new CommonRepository(this);\r\n        this.modalRepository = new ModalRepository(this);\r\n        this.profileRepository = new ProfileRepository(this);\r\n    }\r\n}\r\nexport const BaseRepositoryContext = createContext(new BaseRepository());","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextInput: React.FC<IProps> = ({ input, width, type, placeholder, meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} type={type} width={width} >\r\n            <input {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport { AxiosResponse } from 'axios';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    error: AxiosResponse,\r\n    text?: string,\r\n}\r\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>{error.statusText}</Message.Header>\r\n            {error.data && Object.keys(error.data.errors).length > 0 && (\r\n                <Message.List>\r\n                    {Object.values(error.data.errors).flat().map((err, i) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n                \r\n                )}\r\n            {text && <Message.Content content={text} />}\r\n        </Message>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/inputText';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { IUserFromValues } from '../../app/models/IUser';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\n\r\nconst validate = combineValidators({\r\n    email: isRequired('email'),\r\n    password: isRequired('password'),\r\n})\r\n\r\nconst LoginFrom = () => {\r\n    const baseReposiitory = useContext(BaseRepositoryContext);\r\n    const { login } = baseReposiitory.userRepository;\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFromValues) => login(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validate}\r\n            render={({ handleSubmit, submitting, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header as='h2' content='Login to Fasserly' color='blue' textAlign='center' />\r\n                    <Field name='email' component={TextInput} placeholder='Email' />\r\n                    <Field name='password' component={TextInput} placeholder='Password' type='Password' />\r\n                    {submitError && !dirtySinceLastSubmit && <ErrorMessage error={submitError} text={submitError.status === 401 ? ' Unauthorized Invalid email or password' : 'unknown'}/>}\r\n                    <Button\r\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine  }\r\n                        loading={submitting}\r\n                        color='blue'\r\n                        content='Login'\r\n                        fluid\r\n                    />\r\n                </Form>                \r\n                )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default LoginFrom;\r\n","import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/inputText';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { IUserFromValues } from '../../app/models/IUser';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\n\r\nconst validate = combineValidators({\r\n    email: isRequired('email'),\r\n    username: isRequired('username'),\r\n    //diplayName: isRequired('diplayName'),\r\n    password: isRequired('password'),\r\n})\r\n\r\nconst RegisterFrom = () => {\r\n    const baseReposiitory = useContext(BaseRepositoryContext);\r\n    const { register } = baseReposiitory.userRepository;\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFromValues) => register(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validate}\r\n            render={({ handleSubmit, submitting, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header as='h2' content='Sign Up to Fasserly' color='blue' textAlign='center' />\r\n                    <Field name='username' component={TextInput} placeholder='username' />\r\n                    <Field name='diplayname' component={TextInput} placeholder='diplay Name' />\r\n                    <Field name='email' component={TextInput} placeholder='Email' />\r\n                    <Field name='password' component={TextInput} placeholder='Password' type='Password' />\r\n                    {submitError && !dirtySinceLastSubmit && <ErrorMessage error={submitError} />}\r\n                    <Button\r\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n                        loading={submitting}\r\n                        color='blue'\r\n                        content='Register'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default RegisterFrom;\r\n","import React, { useContext } from 'react';\r\nimport { Menu, Input, Button, Dropdown, Icon, Image } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport { ITList } from '../../app/common/options/ITOptions'\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport LoginFrom from '../User/LoginForm';\r\nimport RegisterForm from '../User/RegisterForm';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const baseReposiitory = useContext(BaseRepositoryContext);\r\n    const { isLoggedIn, user, logout } = baseReposiitory.userRepository;\r\n    const { openModal } = baseReposiitory.modalRepository;\r\n\r\n    return (\r\n        <div>\r\n            <Menu pointing>\r\n                <Menu.Item as={NavLink} exact to='/trainings' name='home'>\r\n                    <img src='/assets/Logo.png' alt='Logo' height='30px' width='30' />\r\n                </Menu.Item>\r\n                <Dropdown\r\n                    item\r\n                    simple\r\n                    text='Categories'\r\n                    direction='right'\r\n                    options={ITList}\r\n                />\r\n                <Menu.Item >\r\n                    <Input icon='search' placeholder='Search...' position='left' />\r\n                </Menu.Item>\r\n                {isLoggedIn && user && <Menu.Item>\r\n                    <Button as={NavLink} to='/createTraining' content='Create Training' />\r\n                </Menu.Item>\r\n                }\r\n                <Menu.Item position='right'>\r\n                    <Button animated='vertical' margin='10'>\r\n                        <Button.Content hidden>Basket</Button.Content>\r\n                        <Button.Content visible>\r\n                            <Icon name='shop' />\r\n                        </Button.Content>\r\n                    </Button>\r\n                </Menu.Item>\r\n                {isLoggedIn && user ?\r\n                    (\r\n                        <Menu.Item>\r\n                            <Image avatar spaced='right' src={user.image || '/assets/Logo.png'} />\r\n                            <Dropdown pointing='top right' text={user.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to={`/profile/${user.username}`} text='My profile' icon='user' />\r\n                                    <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    ) : (\r\n                        <Menu.Item>\r\n                            <div>\r\n                                <Button onClick={() => openModal(<LoginFrom />)} basic color='blue'>Sign in</Button>\r\n                                <Button onClick={() => openModal(<RegisterForm />)} color='red'>Sign up</Button>\r\n                            </div>\r\n                        </Menu.Item>)\r\n                }\r\n            </Menu>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default observer(NavBar);\r\n","import React from 'react';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { IBuyer } from '../../app/models/ITraining';\r\n\r\ninterface IProps {\r\n    buyers: IBuyer[] | null\r\n}\r\nconst styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 2\r\n}\r\n\r\nconst TrainingListItemBuyers: React.FC<IProps> = ({ buyers }) => {\r\n    return (\r\n        <List horizontal>\r\n            {buyers && buyers.map((buyer) => (\r\n                <List.Item key={buyer.username} >\r\n                    <Popup header={buyer.displayName}\r\n                        trigger={\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={buyer.image || '/assets/user.jpg'}\r\n                                bordered\r\n                                style={buyer.following ? styles: null}\r\n                            />}\r\n                    />\r\n                </List.Item>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default TrainingListItemBuyers;","import React, { useContext } from 'react';\r\nimport { Item, Button, Segment, Icon, Label, Rating } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ITraining } from '../../app/models/ITraining';\r\nimport { format } from 'date-fns';\r\nimport TrainingListItemBuyers from './TrainingListItemBuyers';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\n\r\nconst trainingImageStyle = {\r\n    filtre: 'Brightness(50%)',\r\n    marginBottom: 3\r\n}\r\n\r\nconst TrainingItem: React.FC<{ training: ITraining }> = ({ training }) => {\r\n    const owner = training.buyers!.filter(x => x.isOwner)[0];\r\n    const _baseRepository = useContext(BaseRepositoryContext);\r\n    const { buyTraining } = _baseRepository.trainingsRepository;\r\n    const { isLoggedIn } = _baseRepository.userRepository;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image as={Link} to={`/detailTraining/${training.trainingId}`} src={`/assets/${training.title}.jpg`} size=\"medium\" style={trainingImageStyle} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/detailTraining/${training.trainingId}`}>\r\n                                {training.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Created By <Link to={`/profile/${owner.username}`}><strong>{owner.displayName}</strong></Link> </Item.Description>\r\n                            <Item.Description><Rating maxRating={5} defaultRating={3} icon='star' size='small' /></Item.Description>\r\n                            {isLoggedIn && training.isOwner && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='orange'\r\n                                        content='You are the trainer this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                            {isLoggedIn && training.isBuyer && !training.isOwner && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='green'\r\n                                        content='You are going to this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock' /> {format(training.dateOfCreation, 'h:mm a')}\r\n                <br />\r\n                <span>{training.description}</span>\r\n            </Segment>\r\n            {isLoggedIn && (\r\n                <Segment secondary>\r\n                    <TrainingListItemBuyers buyers={training.buyers!} />\r\n                </Segment>\r\n\r\n            )}\r\n\r\n            {isLoggedIn && !training.isOwner && !training.isBuyer ? (\r\n                <Segment clearing attached=\"bottom\">\r\n                    <Button color=\"teal\" content=\"Put to basket\" />\r\n                    <Button color=\"orange\" onClick={buyTraining} content=\"Buy now\" />\r\n                </Segment>\r\n\r\n            ) : (\r\n                    <Segment clearing attached=\"bottom\">\r\n                        <Button color=\"teal\" content=\"Put to basket\" />\r\n                    </Segment>\r\n                )\r\n            }\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default TrainingItem;\r\n","import React, { useContext, Fragment } from 'react';\r\nimport { Label, Item } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport TrainingItem from './trainingItem';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { format } from 'date-fns';\r\n\r\nconst TrainingsList = () => {\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { trainingByDate } = baseRepository.trainingsRepository;\r\n    return (\r\n        <Item.Group divided>\r\n            <Fragment>\r\n                {trainingByDate.map(([group, trainings]) => (\r\n                    <Fragment key={group} >\r\n                        <Label size=\"large\" color=\"blue\">\r\n                            {format(group, 'eeee do MMMM')}\r\n                        </Label>\r\n                        <Item.Group>\r\n                            {trainings.map((training) => (\r\n                                <TrainingItem key={training.trainingId} training={training} />\r\n                            ))}\r\n                        </Item.Group>\r\n                    </Fragment>\r\n                )\r\n                )}\r\n            </Fragment>\r\n        </Item.Group>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingsList);","import React, { Fragment, useContext } from 'react';\nimport { Menu, Header } from 'semantic-ui-react';\nimport { Calendar } from 'react-widgets';\nimport { BaseRepositoryContext } from '../../../app/repositories/baseRepository';\r\nimport { observer } from 'mobx-react-lite';\r\n\nconst TrainingFilters = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const { setPredicate, predicate } = baseRepo.trainingsRepository;\n    return (\n        <Fragment>\n            <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\n                <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\n                <Menu.Item\n                    active={predicate.size === 0}\n                    onClick={() => setPredicate('all', 'true')}\n                    color={'blue'}\n                    name={'all'}\n                    content={'All Courses'}\n                />\n                <Menu.Item\n                    active={predicate.has('isBuyer')}\n                    onClick={() => setPredicate('isBuyer', 'true')}\n                    color={'blue'}\n                    name={'username'}\n                    content={\"My courses\"}\n                />\n                <Menu.Item\n                    active={predicate.has('isOwner')}\n                    onClick={() => setPredicate('isOwner', 'true')}\n                    color={'blue'}\n                    name={'host'}\n                    content={\"I'm owner\"}\n                />\n            </Menu>\n            <Header\n                icon={'calendar'}\n                attached\n                color={'teal'}\n                content={'Select Date'}\n            />\n            <Calendar\n                onChange={date => setPredicate('startDate', date!)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </Fragment>\n    );\n};\n\nexport default observer(TrainingFilters);","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 50 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\nexport default ActivityListItemPlaceholder;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Grid, GridColumn, Loader } from 'semantic-ui-react';\r\nimport TrainingsList from './trainingList';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport TrainingFilters from '../Training/dashboard/TrainingFilters'\r\nimport TrainingItemPlaceholder from '../Training/dashboard/TrainingItemPlaceholder'\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nconst TrainingDashboard: React.FC = () => {\r\n\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { loadTrainings, loading, setPage, page, totalPages } = baseRepository.trainingsRepository;\r\n    const token = window.localStorage.getItem('jwt');\r\n    const { isLoggedIn } = baseRepository.userRepository;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleGetNext = () => {\r\n        setLoadingNext(true);\r\n        setPage(page + 1);\r\n        loadTrainings().then(() => setLoadingNext(false));\r\n    }\r\n    useEffect(() => {\r\n            loadTrainings();\r\n    }, [loadTrainings]);\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                {loading && page === 0 ? <TrainingItemPlaceholder /> : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && page + 1 < totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <TrainingsList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </GridColumn>\r\n            {isLoggedIn && token &&\r\n                <Grid.Column width={6}>\r\n                    <TrainingFilters />\r\n                </Grid.Column>\r\n            }\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingDashboard);","export interface ITrainingEnvelope {\r\n    trainings: ITraining[];\r\n    trainingCount: number;\r\n}\r\nexport interface ITraining {\r\n    trainingId: string;\r\n    title: string;\r\n    description: string;\r\n    language: string;\r\n    rating: number;\r\n    dateOfCreation: Date;\r\n    updateDate?: Date;\r\n    price: string;\r\n    isActive: boolean;\r\n    category: string;\r\n    isBuyer: boolean;\r\n    isOwner: boolean;\r\n    buyers?: IBuyer[];\r\n    comments: IComment[]\r\n}\r\nexport interface ITrainingFormValue extends Partial<ITraining> {\r\n    time?: Date\r\n}\r\nexport interface IComment {\r\n    trainingId: string;\r\n    dateOfComment: string;\r\n    body: string;\r\n    username: string;\r\n    diplayName: string;\r\n    image: string;\r\n}\r\nexport class TrainingFormValues implements ITrainingFormValue {\r\n    trainingId: string = '';\r\n    title: string = '';\r\n    language: string = '';\r\n    price: string = '0';\r\n    rating: number = 0;\r\n    dateOfCreation: Date = new Date(Date.now());\r\n    updateDate: Date = new Date(Date.now());\r\n    description: string = '';\r\n    isActive: boolean = true;\r\n    category: string = '';\r\n\r\n    constructor(init?: TrainingFormValues) {\r\n        Object.assign(this, init)\r\n    }\r\n}\r\n\r\nexport interface IBuyer {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isOwner: boolean;\r\n    following?: boolean;\r\n}\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst InputTextArea: React.FC<IProps> = ({ input, width, rows, placeholder, meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width} >\r\n            <textarea rows={rows} {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default InputTextArea;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst InputSelect: React.FC<IProps> = ({ input, options, width, placeholder, meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width} >\r\n            <Select\r\n                value={input.value}\r\n                onChange={(e, data) => input.onChange(data.value)}\r\n                placeholder={placeholder}\r\n                options={options}\r\n            />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n\r\n    );\r\n}\r\n\r\nexport default InputSelect;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\nimport { DateTimePicker } from 'react-widgets';\r\n\r\ninterface IProps extends FieldRenderProps<Date, HTMLElement>, FormFieldProps { }\r\n\r\nconst InputDate: React.FC<IProps> = ({ input, width, placeholder, date = false, meta: touched, error, ...rest }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width} >\r\n            <DateTimePicker\r\n                placeholder={placeholder}\r\n                value={input.value || null}\r\n                date={date}\r\n                onChange={input.onChange}\r\n                onBlur={input.onBlur}\r\n                onKeyDown={(e) => e.preventDefault()}\r\n            />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default InputDate;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { TrainingFormValues } from '../../app/models/ITraining';\r\nimport { Form, Button, Segment, Grid, GridColumn } from 'semantic-ui-react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Form as FinalFrom, Field } from 'react-final-form'\r\nimport TextInput from '../../app/common/form/inputText';\r\nimport InputTextArea from '../../app/common/form/inputTextArea';\r\nimport { ITList } from '../../app/common/options/ITOptions';\r\nimport InputSelect from '../../app/common/form/inputSelect';\r\nimport InputDate from '../../app/common/form/inputDate';\r\nimport { combineTimeAndDate } from '../../app/common/util/util';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan } from 'revalidate'\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\n\r\nconst validate = combineValidators({\r\n    title: isRequired({ message: 'title est obligatoir' }),\r\n    category: isRequired({ message: 'category est obligatoir' }),\r\n    description: composeValidators(\r\n        isRequired('description '),\r\n        hasLengthGreaterThan(10)({ message: 'au moin 10 charactéres ' })\r\n    )(),\r\n    price: isRequired({ message: 'price est obligatoir' }),\r\n\r\n})\r\n\r\ninterface IDetailParams {\r\n    id: string;\r\n}\r\nconst TrainingEdit: React.FC<RouteComponentProps<IDetailParams>> = ({ match, history }) => {\r\n\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const {\r\n            submitting,\r\n            loadTraining,\r\n            createTraining,\r\n            editTraining \r\n          } = baseRepository.trainingsRepository;\r\n\r\n    const [training, setTraining] = useState(new TrainingFormValues());\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (match.params.id) {\r\n            setLoading(true);\r\n            loadTraining(match.params.id).then(\r\n                (training) => setTraining(new TrainingFormValues(training))\r\n            ).finally(() => setLoading(false));\r\n        }\r\n    }, [loadTraining, match.params.id]);\r\n\r\n    const handleFinalFormSubmit = (values: any) => {\r\n        console.log(values);\r\n        const dateAndTime = combineTimeAndDate(values.dateOfCreation);\r\n        const { date, time, ...training } = values;\r\n        training.dateOfCreation = dateAndTime;\r\n        if (!training.trainingId) {\r\n            let newTraining = {\r\n                ...training,\r\n                trainingId: uuid()\r\n            };\r\n            console.log(training)\r\n            createTraining(newTraining);\r\n        } else {\r\n            editTraining(training);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <Segment clearing  >\r\n                    <FinalFrom\r\n                        validate={validate} //validator\r\n                        initialValues={training}\r\n                        onSubmit={handleFinalFormSubmit}\r\n                        render={({ handleSubmit, pristine }) =>\r\n                            (\r\n                                <Form onSubmit={handleSubmit} loading={loading}>\r\n                                    <Field component={TextInput} placeholder='Title' name='title' value={training.title} />\r\n                                    <Field component={InputTextArea} rows={2} placeholder='Description' name='description' value={training?.description} />\r\n                                    <Field placeholder='Date' component={InputDate} date={true} name='dateOfCreation' value={training.dateOfCreation} />\r\n                                    <Field component={TextInput} placeholder='Price' name='price' value={training.price} />\r\n                                    <Field component={InputSelect} options={ITList} name='category' value={training?.category} />\r\n                                    <Button.Group floated=\"right\">\r\n                                        <Button disabled={loading} onClick={training.trainingId ? () => history.push(`/detailTraining/${training.trainingId}`) : () => history.push('/trainings')} floated='right' type='button'>Cancel</Button>\r\n                                        <Button.Or />\r\n                                        <Button positive disabled={loading || pristine} loading={submitting} floated='right' type='submit'>Submit</Button>\r\n                                    </Button.Group>\r\n                                </Form>\r\n                            )}\r\n                    />\r\n                </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingEdit);","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst Loading: React.FC<{ inverted?: boolean, content?: string }> = ({ inverted, content }) => {\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport { SegmentGroup, Grid, Icon, Segment } from 'semantic-ui-react';\r\nimport { ITraining } from '../../../app/models/ITraining';\r\nimport { format } from 'date-fns';\r\nconst TrainingDetailInfo: React.FC<{ training: ITraining }> = ({ training }) => {\r\n    return (\r\n        <SegmentGroup>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size=\"large\" color=\"teal\" name=\"info\" />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{training.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment>\r\n                <Grid verticalAlign=\"middle\">\r\n                    <Grid.Column width={1}>\r\n                        <Icon size=\"large\" color=\"teal\" name=\"calendar\" />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{format(training.dateOfCreation, 'do MMMM YYYY')} at {format(training.dateOfCreation, 'h:mm a')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment>\r\n                <Grid verticalAlign=\"middle\">\r\n                    <Grid.Column width={1}>\r\n                        <Icon size=\"large\" color=\"teal\" name=\"euro sign\" />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{training.price}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </SegmentGroup>\r\n    );\r\n}\r\n\r\nexport default TrainingDetailInfo;","import React, { Fragment } from 'react';\r\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IBuyer } from '../../../app/models/ITraining';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    buyers: IBuyer[] | null;\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ buyers }) => {\r\n    return (\r\n\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {buyers!.length} {buyers!.length === 1 ? \"Person\" : \"People\"} participate\r\n      </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {buyers!.map((buyer) =>\r\n                        <Item key={buyer.username} style={{ position: 'relative' }} >\r\n                            {buyer.isOwner && <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                               the trainer\r\n                            </Label>}\r\n                            <Image size='tiny' src={buyer.image || '/assets/user.jpg'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${buyer.username}`}>{buyer.displayName}</Link>\r\n                                </Item.Header>\r\n                                {buyer.following && <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\r\n                                \r\n                            </Item.Content>\r\n                        </Item>\r\n                        )}\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);\r\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\nimport { BaseRepositoryContext } from '../../../app/repositories/baseRepository';\r\nimport { Form as FinalFrom, Field } from 'react-final-form';\r\nimport { Link } from 'react-router-dom';\r\nimport InputTextArea from '../../../app/common/form/inputTextArea';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { formatDistance } from 'date-fns';\r\n\nconst TrainingDetailedChat = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const { createHubConnection, stopHubConnection, addcomment, training } = baseRepo.trainingsRepository;\n    const { isLoggedIn } = baseRepo.userRepository;\n    useEffect(() => {\n        createHubConnection(training!.trainingId);\r\n        return () => {\r\n            stopHubConnection();\r\n        }\r\n    }, [createHubConnection, stopHubConnection, training])\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this course</Header>\n            </Segment>\n            <Segment attached>\n                <Comment.Group>\n                    {training && training.comments && training.comments.map((comment) => (\n                        <Comment key={comment.dateOfComment}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profile/${comment.username}`}>{comment.diplayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistance(comment.dateOfComment, new Date())}</div>\n                                </Comment.Metadata>\n                                <Comment.Text>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                    {isLoggedIn &&\n                        <FinalFrom\n                        onSubmit={addcomment}\n                        render={({ handleSubmit, submitting, form }) => (\n                            <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                                <Field\n                                    name='body'\n                                    component={InputTextArea}\n                                    rows={2}\n                                    placeholder='Add you comment'\n                                />\n                                <Button\n                                    content='Add Reply'\n                                    labelPosition='left'\n                                    icon='edit'\n                                    primary\n                                    loading={submitting}\n                                />\n                            </Form>\n                        )}\n                    />}\n                </Comment.Group>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(TrainingDetailedChat);\n","import React, { useContext, useEffect } from 'react';\r\nimport { Button, Card, Image, Label, Grid, GridColumn } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport Loading from '../../app/layout/Loading';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport TrainingDetailInfo from './trainingItem/trainingDetailInfo';\r\nimport TrainingDetailSideBar from './trainingItem/trainingDetailSideBar';\r\nimport TrainingDetailedChat from './trainingItem/TrainingDetailedChat';\r\n\r\n\r\ninterface DetailsParams {\r\n    id: string;\r\n}\r\nconst TrainingDetails: React.FC<RouteComponentProps<DetailsParams>> = ({ match, history }) => {\r\n\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { training, loadTraining, loading, deleteTraining, refundTraining, buyTraining, loadingBuy } = baseRepository.trainingsRepository;\r\n\r\n    useEffect(() => {\r\n        loadTraining(match.params.id);\r\n    }, [loadTraining, match.params.id, history])\r\n\r\n    if (loading) return <Loading content={\"Loading Training..\"} />\r\n    if (!training) {\r\n        return <h1>srf</h1>\r\n    }\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <Card fluid>\r\n                    <Image size=\"tiny\" src={`/assets/${training.title}.jpg`} ui={false} />\r\n                    <Card.Content>\r\n                        <Card.Header>\r\n                            {training?.title}\r\n                            <Label.Group tag>\r\n                                <Label as='a'>€{training?.price}</Label>\r\n                            </Label.Group>\r\n                        </Card.Header>\r\n                        <Card.Meta>\r\n                            <span className='date'>{format(training.dateOfCreation, 'do MMMM YYYY')}</span>\r\n                        </Card.Meta>\r\n                        <Card.Description>\r\n                            {training?.description}\r\n                        </Card.Description>\r\n                    </Card.Content>\r\n                    {training.isOwner ?\r\n                        (\r\n                            <Card.Content extra>\r\n                                <Button as={Link} to={`/manage/${training.trainingId}`} /*onClick={() => trainingStore.editMode = true}*/ color='green'>Edit</Button>\r\n                                <Button /*onClick={() => deleteTraining(training?.trainingId)}*/ color='red'>Delete</Button>\r\n                                <Button onClick={() => history.push('/trainings')} > Cancel</Button>\r\n                            </Card.Content>) :\r\n                        training.isBuyer ? (\r\n                            <Card.Content extra>\r\n                                <Button as={Link} to={`/share/${training.trainingId}`} color='green'>Share</Button>\r\n                                <Button as={Link} to={`/favorite/${training.trainingId}`} color='red'>favorites</Button>\r\n                                <Button loading={loadingBuy} onClick={refundTraining} > Refund</Button>\r\n                            </Card.Content>) :\r\n                            (\r\n                                <Card.Content extra>\r\n                                    <Button loading={loadingBuy} onClick={buyTraining} color='green'>Purchase now</Button>\r\n                                    <Button as={Link} to={`/basket/${training.trainingId}`} color='teal'>Put to basket</Button>\r\n                                    <Button onClick={() => history.push('/trainings')} > Cancel</Button>\r\n                                </Card.Content>\r\n                            )\r\n                    }\r\n                </Card>\r\n                <TrainingDetailInfo training={training} />\r\n                <TrainingDetailedChat />\r\n            </GridColumn>\r\n            <GridColumn width={6}>\r\n                <TrainingDetailSideBar buyers={training.buyers!} />\r\n            </GridColumn>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(TrainingDetails);","import React from 'react';\r\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\r\nimport { IProfile } from '../../app/models/IPorfile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    profile: IProfile,\r\n    isCurrentUser: boolean,\r\n    loading: boolean,\r\n    follow: (username: string) => void;\r\n    unfollow: (username: string) => void;\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nconst ProfileHeader: React.FC<IProps> = ({ profile, follow, unfollow, loading, isCurrentUser, isLoggedIn }) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image\r\n                                avatar\r\n                                size='small'\r\n                                src={profile.image! || '/assets/user.jpg'}\r\n                            />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'>{profile.displayName}</Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingsCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    {!isCurrentUser && isLoggedIn &&\r\n                        <Reveal animated='move'>\r\n                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                <Button\r\n                                    fluid\r\n                                    color='teal'\r\n                                    content={profile.following ? 'Following' : 'Not following'}\r\n                                />\r\n                            </Reveal.Content>\r\n                            <Reveal.Content hidden>\r\n                                <Button\r\n                                    loading={loading}\r\n                                    fluid\r\n                                    basic\r\n                                    color={profile.following ? 'red' : 'green'}\r\n                                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                                    onClick={\r\n                                        profile.following\r\n                                            ? () => unfollow(profile.username)\r\n                                            : () => follow(profile.username)\r\n                                    }\r\n                                />\r\n                            </Reveal.Content>\r\n                        </Reveal>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n    border: 'dashed 3px',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\n    borderColor: 'green'\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(\r\n            acceptedFiles.map((file: object) =>\r\n                Object.assign(file, {\r\n                    preview: URL.createObjectURL(file)\r\n                })\r\n            )\r\n        );\r\n    }, [setFiles]);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n    return (\r\n        <div\r\n            {...getRootProps()}\r\n            style={\r\n                isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\r\n            }\r\n        >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React, { useRef } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface IProps {\r\n    setImage: (file: Blob) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\r\n    const cropper = useRef<Cropper>(null);\r\n\r\n    const cropImage = () => {\r\n        if (\r\n            cropper.current &&\r\n            typeof cropper.current.getCroppedCanvas() === 'undefined'\r\n        ) {\r\n            return;\r\n        }\r\n        cropper &&\r\n            cropper.current &&\r\n            cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n                setImage(blob);\r\n            }, 'image/jpeg');\r\n    };\r\n\r\n    return (\r\n        <Cropper\r\n            ref={cropper}\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            // Cropper.js options\r\n            aspectRatio={1 / 1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop={cropImage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetCropper;\r\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { Header, Grid, Button } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface IProps {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n    const [files, setFiles] = useState<any[]>([]);\n    const [image, setImage] = useState<Blob | null>(null);\n\n    useEffect(() => {\n        return () => {\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        };\n    });\n\n    return (\n        <Fragment>\n            <Grid>\n                <Grid.Column width={4}>\n                    <Header color='teal' sub content='Step 1 - Add Photo' />\n                    <PhotoWidgetDropzone setFiles={setFiles} />\n                </Grid.Column>\n                <Grid.Column width={1} />\n                <Grid.Column width={4}>\n                    <Header sub color='teal' content='Step 2 - Resize image' />\n                    {files.length > 0 &&\n                        <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview} />\n                    }\n                </Grid.Column>\n                <Grid.Column width={1} />\n                <Grid.Column width={4}>\n                    <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                    {files.length > 0 &&\n                        <Fragment>\n                            <div className='img-preview' style={{ minHeight: '200px', overflow: 'hidden' }} />\n                            <Button.Group widths={2}>\n                            <Button positive icon='check' loading={loading} onClick={() => uploadPhoto(image!)} />\n                            <Button negative icon='close' disabled={loading} onClick={() => setFiles([])} />\n                            </Button.Group>\n                        </Fragment>\n                    }\n                </Grid.Column>\n            </Grid>\n        </Fragment>\n    );\n};\n\nexport default observer(PhotoUploadWidget);\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ProfilePhotos = () => {\r\n    const baseRepo = useContext(BaseRepositoryContext)\r\n    const { profile, isCurrentUser, uploadPhoto, uploadingPhoto, setMainPhoto, deletePhoto, loading } = baseRepo.profileRepository;\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState<string | undefined>(undefined);\r\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\r\n    const handleUploadImage = (photo: Blob) => {\r\n        uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget\r\n                            uploadPhoto={handleUploadImage}\r\n                            loading={uploadingPhoto}\r\n                        />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile &&\r\n                                    profile.photos.map(photo => (\r\n                                        <Card key={photo.id}>\r\n                                            <Image src={photo.url} />\r\n                                            {isCurrentUser && (\r\n                                                <Button.Group fluid widths={2}>\r\n                                                    <Button\r\n                                                        onClick={e => {\r\n                                                            setMainPhoto(photo);\r\n                                                            setTarget(e.currentTarget.name);\r\n                                                        }}\r\n                                                        name={photo.id}\r\n                                                        disabled={photo.isMain}\r\n                                                        loading={loading && target === photo.id}\r\n                                                        basic\r\n                                                        positive\r\n                                                        content='Main'\r\n                                                    />\r\n                                                    <Button\r\n                                                        name={photo.id}\r\n                                                        disabled={photo.isMain}\r\n                                                        onClick={(e) => {\r\n                                                            deletePhoto(photo);\r\n                                                            setDeleteTarget(e.currentTarget.name)\r\n                                                        }}\r\n                                                        loading={loading && deleteTarget === photo.id}\r\n                                                        basic\r\n                                                        negative\r\n                                                        icon='trash'\r\n                                                    />\r\n                                                </Button.Group>\r\n                                            )}\r\n                                        </Card>\r\n                                    ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import React from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, } from 'semantic-ui-react';\r\nimport TextInput from '../form/inputText';\r\nimport InputTextArea from '../form/inputTextArea';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { IProfile } from '../../models/IPorfile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst validate = combineValidators({\r\n    displayName: isRequired('displayName'),\r\n})\r\n\r\ninterface IProps {\r\n    editProfile: (profile: Partial<IProfile>) => void;\r\n    profile: IProfile;\r\n}\r\n\r\nconst ProfileEditForm: React.FC<IProps> = ({ editProfile, profile }) => {\r\n    return (\r\n        <FinalForm\r\n            onSubmit={editProfile}\r\n            validate={validate}\r\n            initialValues={profile!}\r\n            render={({ handleSubmit, invalid, pristine, submitting }) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Field\r\n                        name='displayName'\r\n                        component={TextInput}\r\n                        placeholder='Display Name'\r\n                        value={profile!.displayName}\r\n                    />\r\n                    <Field\r\n                        name='bio'\r\n                        component={InputTextArea}\r\n                        rows={3}\r\n                        placeholder='Bio'\r\n                        value={profile!.bio}\r\n                    />\r\n                    <Button\r\n                        loading={submitting}\r\n                        floated='right'\r\n                        disabled={invalid || pristine}\r\n                        positive\r\n                        content='Update profile'\r\n                    />\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEditForm);\r\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Header, List, Button, Grid } from 'semantic-ui-react';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ProfileEditForm from '../../app/common/EditProfile/ProfileEditForm';\r\n\r\nconst ProfileDescription = () => {\r\n    const baseRepo = useContext(BaseRepositoryContext);\r\n    const { isCurrentUser, profile, editProfile } = baseRepo.profileRepository;\r\n    const [editProfileMode, setEditProfileMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n                    <Header floated='left' icon='address card' content={`About ${profile!.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setEditProfileMode(!editProfileMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={editProfileMode ? 'Cancel' : 'Edit Profile'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editProfileMode ? (\r\n                        <ProfileEditForm editProfile={editProfile} profile={profile!} />\r\n                    ) : (\r\n                            <List>\r\n                                <List.Item>\r\n                                    <List.Icon name='marker' />\r\n                                    <List.Content>{profile!.bio}</List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List.Icon name='mail' />\r\n                                    <List.Content>{profile!.email}</List.Content>\r\n                                </List.Item>\r\n                            </List>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileDescription);","import React from 'react';\r\nimport { Card, Image, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IProfile } from '../../app/models/IPorfile';\r\ninterface IProps {\r\n    following: IProfile;\r\n}\r\nconst ProfileCard: React.FC<IProps> = ({ following }) => {\r\n    return (\r\n        <Card as={Link} to={`/profile/${following.username}`}>\r\n            <Image src={following.image || '/assets/user.jpg'} />\r\n            <Card.Content>\r\n                <Card.Header>{following.displayName}</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <div>\r\n                    <Icon name='user' />\r\n                    {following.followersCount} followers\r\n                </div>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ProfileCard;","import React, { useContext } from 'react';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const { profile, followings, loading, activeTab } = baseRepo.profileRepository;\n\n    return (\n        <Tab.Pane loading={loading}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={\n                            activeTab === 3\n                                ? `People following ${profile!.displayName}`\n                                : `People ${profile!.displayName} is following`\n                        }\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={5}>\n                        {followings.map((following) => (\n                            <ProfileCard key={following.username} following={following} />\n                        ))}\n\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default ProfileFollowings;","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\nimport { IUserTraining } from '../../app/models/IPorfile';\r\n\nconst panes = [\n    { menuItem: 'Owining', pane: { key: 'owned' } }\n];\nconst loggedPanes = [\n    { menuItem: 'Owining', pane: { key: 'owned' } },\n    { menuItem: 'Past Courses', pane: { key: 'pastCourses' } },\n    { menuItem: 'Future Courses', pane: { key: 'futureCourses' } }\n];\nconst ProfileEvents = () => {\n    const baseRepo = useContext(BaseRepositoryContext);\n    const {\n        loadUserTrainings,\n        profile,\n        loadingTraining,\n        userTrainings\n    } = baseRepo.profileRepository!;\n    const { isLoggedIn } = baseRepo.userRepository;\r\n\n    useEffect(() => {\n        loadUserTrainings(profile!.username, 'owning');\n    }, [loadUserTrainings, profile]);\n\n    const handleTabChange = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n        data: TabProps\n    ) => {\n        let predicate;\n        switch (data.activeIndex) {\n            case 1:\n                predicate = 'past';\n                break;\n            case 2:\n                predicate = 'future';\n                break;\n            default:\n                predicate = 'owning';\n                break;\n        }\n        loadUserTrainings(profile!.username, predicate);\n    };\n\n    return (\n        <Tab.Pane loading={loadingTraining}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='book' content={'Trainings'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={isLoggedIn ? loggedPanes : panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userTrainings.map((training: IUserTraining) => (\n                            <Card\n                                as={Link}\n                                to={`/training/${training.id}`}\n                                key={training.id}\n                            >\n                                <Image\n                                    src={`/assets/${training.title}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{training.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(training.date), 'do LLL')}</div>\n                                        <div>{format(new Date(training.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileEvents);","import React from 'react'\r\nimport { Tab } from 'semantic-ui-react';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileDescription from './ProfileDescription';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfileTrainings from './ProfileTrainings';\r\n\r\nconst panes = [\r\n    { menuItem: 'About', render: () => <ProfileDescription /> },\r\n    { menuItem: 'Photos', render: () => < ProfilePhotos />},\r\n    {\r\n        menuItem: 'Trainings', render: () => <ProfileTrainings/> },\r\n    { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n    { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n]\r\n\r\ninterface IProps {\r\n    setActiveTab: (activeIndex: any) => void;\r\n}\r\n\r\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProfileContent\r\n","import React, { useContext, useEffect } from 'react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { BaseRepositoryContext } from '../../app/repositories/baseRepository';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport Loading from '../../app/layout/Loading';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface RouteParams {\r\n    username: string\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> { }\r\n\r\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\r\n    const baseRepo = useContext(BaseRepositoryContext);\r\n    const { loadProfile, profile, loadingProfile, follow, unfollow, isCurrentUser, loading, setActiveTab } = baseRepo.profileRepository;\r\n    const { isLoggedIn } = baseRepo.userRepository;\r\n\r\n    useEffect(() => {\r\n        loadProfile(match.params.username);\r\n    }, [loadProfile, match])\r\n    if (loadingProfile) return <Loading content=\"Loading Profile ...\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader\r\n                    profile={profile!}\r\n                    follow={follow}\r\n                    unfollow={unfollow}\r\n                    isCurrentUser={isCurrentUser}\r\n                    loading={loading}\r\n                    isLoggedIn={isLoggedIn}\r\n                />\r\n                <ProfileContent setActiveTab={setActiveTab}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport default observer(ProfilePage);","import React from 'react';\r\nimport { Segment, Header, Icon, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon >\r\n                <Icon name=\"search\" />\r\n                Oops hahaha\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to=\"/trainings/\" primary>\r\n                    Return to Trainings Page...\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React, { useContext } from 'react';\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { BaseRepositoryContext } from '../../repositories/baseRepository';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ModalContainer = () => {\r\n    const baseRepo = useContext(BaseRepositoryContext);\r\n    const { closeModal, modal: { open, body } } = baseRepo.modalRepository;\r\n    return (\r\n        <Modal open={open} onClose={closeModal} size='mini'>\r\n            <Modal.Content>{body}</Modal.Content>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default observer(ModalContainer);","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react'\r\nimport NavBar from '../../features/Nav/navBar';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Route, RouteComponentProps, withRouter, Switch } from 'react-router-dom';\r\nimport TrainingDashboard from '../../features/Training/defaultDashboard';\r\nimport TrainingEdit from '../../features/Training/form';\r\nimport TrainingDetails from '../../features/Training/detail';\r\nimport ProfilePage from '../../features/Profile/ProfilePage';\r\nimport NotFound from './NoFound';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { BaseRepositoryContext } from '../repositories/baseRepository';\r\nimport Loading from './Loading';\r\nimport ModalContainer from '../common/modal/ModalContainer';\r\n\r\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\r\n    const baseRepository = useContext(BaseRepositoryContext);\r\n    const { token, setAppLoaded, appLoaded } = baseRepository.commonRepository;\r\n    const { getUser } = baseRepository.userRepository;\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            getUser().finally(() => setAppLoaded())\r\n        }\r\n        else {\r\n            setAppLoaded();\r\n        }\r\n    })\r\n    if (!appLoaded) return <Loading content='Loading app ...' />\r\n    return (\r\n        <div>\r\n            <ModalContainer />\r\n            <Fragment>\r\n                <ToastContainer position='bottom-right' />\r\n                <NavBar />\r\n                <Container style={{ marginTop: '3em' }}>\r\n                    <Switch>\r\n                        <Route exact path='/' component={TrainingDashboard} />\r\n                        <Route exact path='/trainings' component={TrainingDashboard} />\r\n                        <Route key={location.key} exact path={['/createTraining', '/manage/:id']} component={TrainingEdit} />\r\n                        <Route path='/detailTraining/:id' component={TrainingDetails} />\r\n                        <Route path='/profile/:username' component={ProfilePage} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </Container>\r\n            </Fragment>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(observer(App));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return children;\r\n};\r\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport { createBrowserHistory } from 'history';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport * as serviceWorker from './serviceWorker';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\nimport ScrollToTop  from './app/layout/ScrollToTop'\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history} >\n        <ScrollToTop>\n            <App />\n        </ScrollToTop>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}